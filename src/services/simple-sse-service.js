import ReconnectingEventSource from 'reconnecting-eventsource';
import tokenSynchronizer from './tokenSynchronizer';

/**
 * üéØ Simple SSE Service - Âü∫‰∫éreconnecting-eventsource
 * 
 * ‰ºòÂäø:
 * - ËΩªÈáèÁ∫ß (~2KB)
 * - Áõ¥Êé•ÊõøÊç¢ÂéüÁîüEventSource
 * - Ëá™Âä®ÈáçËøû
 * - ÁÆÄÂçïÊòìÁî®
 * - ÊúÄÂ∞èÂ≠¶‰π†ÊàêÊú¨
 */
class SimpleSSEService {
  constructor() {
    this.eventSource = null;
    this.isConnected = false;
    this.listeners = new Map();
    this.connectionPromise = null;
  }

  /**
   * üöÄ ËøûÊé•SSE - ‰∏ÄË°å‰ª£Á†ÅËß£ÂÜ≥ÈáçËøûÈóÆÈ¢ò
   */
  async connect() {
    if (this.connectionPromise) {
      return this.connectionPromise;
    }

    this.connectionPromise = this._initializeConnection();
    return this.connectionPromise;
  }

  async _initializeConnection() {
    try {
      const token = await tokenSynchronizer.getToken();
      if (!token) {
        throw new Error('No authentication token available');
      }

      const url = `${this._getSSEUrl()}?access_token=${encodeURIComponent(token)}`;
      console.log('üöÄ [SimpleSSE] Connecting to:', url.replace(/access_token=[^&]+/, 'access_token=***'));

      // ÂÖ≥Èó≠Áé∞ÊúâËøûÊé•
      if (this.eventSource) {
        this.eventSource.close();
      }

      // üéØ reconnecting-eventsourceÈÖçÁΩÆ - ÊØîÂéüÁîüEventSourceÂº∫Â§ß
      this.eventSource = new ReconnectingEventSource(url, {
        // ÈáçËøûÈÖçÁΩÆ
        max_retry_time: 30000,      // ÊúÄÂ§ßÈáçËøûÈó¥Èöî30Áßí
        initial_retry_delay: 1000,  // ÂàùÂßãÈáçËøûÂª∂Ëøü1Áßí
        retry_delay_multiplier: 1.5, // Âª∂ËøüÂÄçÊï∞1.5
        max_retry_attempts: 10,     // ÊúÄÂ§ßÈáçËØï10Ê¨°
        
        // EventSourceÈÖçÁΩÆ
        withCredentials: false,
        
        // Ëá™ÂÆö‰πâheaders (ÈÄöËøáURLÂèÇÊï∞ÔºåÂõ†‰∏∫EventSourceÈôêÂà∂)
        headers: {
          'Accept': 'text/event-stream',
          'Cache-Control': 'no-cache'
        }
      });

      // ËÆæÁΩÆ‰∫ã‰ª∂ÁõëÂê¨Âô®
      this._setupEventListeners();

      // Á≠âÂæÖËøûÊé•Âª∫Á´ã
      return new Promise((resolve, reject) => {
        const timeout = setTimeout(() => {
          reject(new Error('Connection timeout'));
        }, 30000);

        this.eventSource.addEventListener('open', () => {
          clearTimeout(timeout);
          this.isConnected = true;
          console.log('‚úÖ [SimpleSSE] Connected successfully');
          console.log('üîó [SimpleSSE] Ready state:', this.eventSource.readyState);
          resolve();
        });

        this.eventSource.addEventListener('error', (error) => {
          console.warn('‚ö†Ô∏è [SimpleSSE] Connection error (will auto-retry):', error);
          // reconnecting-eventsource‰ºöËá™Âä®ÈáçËØïÔºåËøôÈáå‰∏çÈúÄË¶Åreject
        });
      });

    } catch (error) {
      this.isConnected = false;
      this.connectionPromise = null;
      console.error('‚ùå [SimpleSSE] Connection failed:', error);
      throw error;
    }
  }

  /**
   * üéØ ËÆæÁΩÆ‰∫ã‰ª∂ÁõëÂê¨Âô®
   */
  _setupEventListeners() {
    // ËøûÊé•ÊâìÂºÄ
    this.eventSource.addEventListener('open', () => {
      this.isConnected = true;
      console.log('‚úÖ [SimpleSSE] Connection opened');
    });

    // ËøûÊé•ÈîôËØØ
    this.eventSource.addEventListener('error', (error) => {
      console.warn('‚ö†Ô∏è [SimpleSSE] Connection error:', error);
      // reconnecting-eventsource‰ºöËá™Âä®Â§ÑÁêÜÈáçËøû
    });

    // Ê∂àÊÅØÊé•Êî∂
    this.eventSource.addEventListener('message', (event) => {
      console.log('üì® [SimpleSSE] Message received:', event.data.substring(0, 100) + '...');
      this._handleMessage(event);
    });

    // Ëá™ÂÆö‰πâ‰∫ã‰ª∂Á±ªÂûã
    const customEvents = ['new_message', 'user_joined', 'user_left', 'typing_start', 'typing_stop'];
    customEvents.forEach(eventType => {
      this.eventSource.addEventListener(eventType, (event) => {
        console.log(`üì® [SimpleSSE] ${eventType} event:`, event.data);
        this._handleMessage(event, eventType);
      });
    });
  }

  /**
   * üì® Â§ÑÁêÜÊ∂àÊÅØ
   */
  _handleMessage(event, eventType = null) {
    try {
      const data = JSON.parse(event.data);
      const type = eventType || data.type || 'message';
      
      this._emitToListeners(type, data);
      
    } catch (error) {
      console.warn('‚ö†Ô∏è [SimpleSSE] Failed to parse message:', event.data, error);
    }
  }

  /**
   * üëÇ ‰∫ã‰ª∂ÁõëÂê¨
   */
  on(eventType, callback) {
    if (!this.listeners.has(eventType)) {
      this.listeners.set(eventType, []);
    }
    
    this.listeners.get(eventType).push(callback);
    
    return () => {
      const listeners = this.listeners.get(eventType) || [];
      const index = listeners.indexOf(callback);
      if (index > -1) {
        listeners.splice(index, 1);
      }
    };
  }

  /**
   * üì° ÂàÜÂèë‰∫ã‰ª∂
   */
  _emitToListeners(eventType, data) {
    const listeners = this.listeners.get(eventType) || [];
    listeners.forEach(callback => {
      try {
        callback(data);
      } catch (error) {
        console.warn('[SimpleSSE] Listener error:', error);
      }
    });
  }

  /**
   * üåê Ëé∑ÂèñSSE URL
   */
  _getSSEUrl() {
    const isViteEnv = window.location.port === '5173' || window.location.port === '5174';
    
    if (isViteEnv) {
      return '/events';
    } else {
      return 'https://hook-nav-attempt-size.trycloudflare.com/events';
    }
  }

  /**
   * üîå Êñ≠ÂºÄËøûÊé•
   */
  disconnect() {
    console.log('üîå [SimpleSSE] Disconnecting...');
    
    if (this.eventSource) {
      this.eventSource.close();
      this.eventSource = null;
    }
    
    this.isConnected = false;
    this.connectionPromise = null;
    this.listeners.clear();
  }

  /**
   * üìä ËøûÊé•Áä∂ÊÄÅ
   */
  get connected() {
    return this.isConnected && this.eventSource?.readyState === 1;
  }

  /**
   * üìà ËøûÊé•‰ø°ÊÅØ
   */
  getConnectionInfo() {
    return {
      connected: this.connected,
      readyState: this.eventSource?.readyState,
      library: 'reconnecting-eventsource'
    };
  }
}

export const simpleSSEService = new SimpleSSEService();

// ÂºÄÂèëË∞ÉËØï
if (import.meta.env.DEV) {
  window.simpleSSEService = simpleSSEService;
  
  window.testSimpleSSE = async () => {
    try {
      await simpleSSEService.connect();
      console.log('‚úÖ Simple SSE connection test passed');
    } catch (error) {
      console.error('‚ùå Simple SSE connection test failed:', error);
    }
  };
}

export default simpleSSEService; 