/**
 * 🔧 统一文件URL处理系统
 * 自动处理所有可能的文件URL格式，避免404错误
 */

import { useAuthStore } from '@/stores/auth';

/**
 * 获取工作区ID的辅助函数
 */
function getWorkspaceId(fileInput, options) {
  const authStore = useAuthStore();
  return options.workspaceId ||
    authStore.user?.workspace_id ||
    fileInput?.workspace_id ||
    2;
}

/**
 * 检查是否为哈希路径格式
 */
function isHashPath(str) {
  const parts = str.split('/');
  return parts.length >= 3 &&
    parts[0].length === 3 &&
    parts[1].length === 3 &&
    parts[2].includes('.');
}

/**
 * 检查是否为简单文件名
 */
function isSimpleFilename(str) {
  return !str.includes('/') && str.includes('.');
}

/**
 * 构造哈希URL
 */
function constructHashUrl(filename, workspaceId) {
  if (isHashPath(filename)) {
    return `/files/${workspaceId}/${filename}`;
  }

  const cleanFilename = filename.replace(/^.*\//, '');

  if (cleanFilename.length >= 10) {
    const hash1 = cleanFilename.substring(0, 3);
    const hash2 = cleanFilename.substring(3, 6);
    return `/files/${workspaceId}/${hash1}/${hash2}/${cleanFilename}`;
  }

  return `/files/${workspaceId}/${cleanFilename}`;
}

/**
 * 标准化URL字符串
 */
function normalizeUrlString(url, workspaceId) {
  // 1. 已经是正确的files格式
  if (url.startsWith('/files/') && url.includes(`/${workspaceId}/`)) {
    return url;
  }

  // 2. 错误的API格式: /api/files/...
  if (url.startsWith('/api/files/')) {
    const pathPart = url.substring(11); // Remove '/api/files/'
    return `/files/${workspaceId}/${pathPart}`;
  }

  // 3. 错误的download格式: /api/files/download/filename
  if (url.includes('/api/files/download/')) {
    const filename = url.split('/download/')[1];
    return constructHashUrl(filename, workspaceId);
  }

  // 4. 简单的/files/格式但workspace可能错误
  if (url.startsWith('/files/')) {
    const parts = url.split('/');
    if (parts.length >= 3) {
      const filename = parts.slice(3).join('/');
      return constructHashUrl(filename, workspaceId);
    }
  }

  // 5. hash路径格式
  if (isHashPath(url)) {
    return `/files/${workspaceId}/${url}`;
  }

  // 6. 完整路径格式
  if (url.includes('/app/data/')) {
    const cleanPath = url.replace(/^.*\/app\/data\//, '');
    return `/files/${workspaceId}/${cleanPath}`;
  }

  // 7. 简单文件名
  if (isSimpleFilename(url)) {
    return constructHashUrl(url, workspaceId);
  }

  // 8. 外部URL
  if (url.startsWith('http') || url.startsWith('blob:')) {
    return url;
  }

  console.warn('⚠️ [FileUrlHandler] Unknown URL format:', url);
  return constructHashUrl(url, workspaceId);
}

/**
 * 标准化文件对象
 */
function normalizeFileObject(file, workspaceId) {
  const candidates = [
    file.file_url,
    file.url,
    file.path,
    file.filename,
    file.file_name,
    file.name
  ].filter(Boolean);

  for (const candidate of candidates) {
    const result = normalizeUrlString(candidate, workspaceId);
    if (result) {
      return result;
    }
  }

  console.error('❌ [FileUrlHandler] No valid URL found in file object:', file);
  return null;
}

/**
 * 主要方法：统一文件URL处理器
 * 智能处理任何文件URL格式
 */
export function getStandardFileUrl(fileInput, options = {}) {
  try {
    const workspaceId = getWorkspaceId(fileInput, options);

    if (typeof fileInput === 'string') {
      return normalizeUrlString(fileInput, workspaceId);
    }

    if (typeof fileInput === 'object' && fileInput !== null) {
      return normalizeFileObject(fileInput, workspaceId);
    }

    console.error('❌ [FileUrlHandler] Invalid file input:', fileInput);
    return null;

  } catch (error) {
    console.error('❌ [FileUrlHandler] Error processing file URL:', error);
    return null;
  }
}

/**
 * 调试URL转换
 */
export function debugFileUrl(fileInput, options = {}) {
  console.group('🔍 [FileUrlHandler] URL Debug');
  console.log('Input:', fileInput);
  const result = getStandardFileUrl(fileInput, options);
  console.log('Output:', result);
  console.groupEnd();
  return result;
}

// 向后兼容：保持原有的class导出
export class FileUrlHandler {
  getStandardUrl(fileInput, options = {}) {
    return getStandardFileUrl(fileInput, options);
  }

  debugUrlConversion(fileInput, options = {}) {
    return debugFileUrl(fileInput, options);
  }
}

// 向后兼容：实例导出
export const fileUrlHandler = new FileUrlHandler();

