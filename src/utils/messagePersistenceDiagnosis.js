/**
 * Message Persistence Diagnosis Tool
 * ‰∏ìÈó®ÂàÜÊûêÊ∂àÊÅØÂà∑Êñ∞Âêé‰∏¢Â§±ÁöÑÈóÆÈ¢ò
 */

class MessagePersistenceDiagnosis {
  constructor() {
    this.testResults = [];
    this.initialize();
  }

  initialize() {
    if (import.meta.env.DEV) {
      console.log('üîç Message Persistence Diagnosis Tool loaded');
    }

  /**
   * ÂÆåÊï¥ÁöÑÊ∂àÊÅØÊåÅ‰πÖÂåñËØäÊñ≠ÊµÅÁ®ã
   */
  async diagnoseMessagePersistence() {
    if (import.meta.env.DEV) {
      console.log('\nüîç COMPREHENSIVE MESSAGE PERSISTENCE DIAGNOSIS');
    if (import.meta.env.DEV) {
      console.log('==============================================\n');
    }

    // 1. ÂàÜÊûêÈóÆÈ¢òÂàÜÁ±ª
    this.analyzeProblemonCategories();

    // 2. Ê£ÄÊü•ÂâçÁ´ØÊú∫Âà∂
    await this.checkFrontendMechanisms();

    // 3. Ê£ÄÊü•ÂêéÁ´ØÁä∂ÊÄÅ
    await this.checkBackendStatus();

    // 4. Ê£ÄÊü•Êï∞ÊçÆÂ∫ìËøûÊé•
    await this.checkDatabasePersistence();

    // 5. È™åËØÅÁºìÂ≠òË°å‰∏∫
    this.checkCacheBehavior();

    // 6. ÁîüÊàêÊúÄÁªàÊä•Âëä
    this.generateFinalReport();
  }

  /**
   * 1. ÈóÆÈ¢òÂàÜÁ±ªÂàÜÊûê
   */
  analyzeProblemonCategories() {
    if (import.meta.env.DEV) {
      console.log('1Ô∏è‚É£ PROBLEM CLASSIFICATION ANALYSIS');
    if (import.meta.env.DEV) {
      console.log('==================================\n');
    }

    const problemCategories = [
      {
        category: 'Frontend Cache Invalidation',
        description: 'ÂâçÁ´ØÁºìÂ≠òÂú®È°µÈù¢Âà∑Êñ∞Êó∂Ë¢´Ê∏ÖÁ©∫',
        likelihood: 'HIGH',
        symptoms: ['Messages disappear on refresh', 'No persistence across page reloads'],
        technicalTerm: 'Cache Purge on Reload',
        solution: 'Implement persistent storage (localStorage/IndexedDB)'
      },
      {
        category: 'Optimistic Update Persistence Failure',
        description: '‰πêËßÇÊõ¥Êñ∞Ê≤°ÊúâÊ≠£Á°ÆÊõøÊç¢‰∏∫ÊúçÂä°Âô®ÂìçÂ∫î',
        likelihood: 'MEDIUM',
        symptoms: ['Temporary IDs remain', 'Messages marked as "sending"'],
        technicalTerm: 'Optimistic Update Orphaning',
        solution: 'Ensure proper message state management'
      },
      {
        category: 'API Response Data Loss',
        description: 'APIÂìçÂ∫îÊàêÂäü‰ΩÜÊ∂àÊÅØÊú™Ê≠£Á°Æ‰øùÂ≠òÂà∞ÁºìÂ≠ò',
        likelihood: 'MEDIUM',
        symptoms: ['Network tab shows 200 OK', 'But messages not in cache'],
        technicalTerm: 'Response Handling Failure',
        solution: 'Fix message normalization and cache update logic'
      },
      {
        category: 'Backend Database Transaction Failure',
        description: 'ÂêéÁ´ØËøîÂõûÊàêÂäü‰ΩÜÂÆûÈôÖÊú™ÂÜôÂÖ•Êï∞ÊçÆÂ∫ì',
        likelihood: 'LOW',
        symptoms: ['API returns success', 'Database query shows no record'],
        technicalTerm: 'Transaction Commit Failure',
        solution: 'Backend transaction integrity checks'
      },
      {
        category: 'Session State Corruption',
        description: 'Áî®Êà∑sessionÊàñËÆ§ËØÅÁä∂ÊÄÅÂØºËá¥Ê∂àÊÅØËÆøÈóÆÂ§±Ë¥•',
        likelihood: 'MEDIUM',
        symptoms: ['Messages visible before refresh', 'Access denied after refresh'],
        technicalTerm: 'Session Invalidation',
        solution: 'Session management and token refresh'
      }
    ];

    problemCategories.forEach(cat => {
      if (import.meta.env.DEV) {
        console.log(`üìç ${cat.category} (${cat.likelihood} likelihood)`);
      if (import.meta.env.DEV) {
        console.log(`   Technical term: ${cat.technicalTerm}`);
      if (import.meta.env.DEV) {
        console.log(`   Description: ${cat.description}`);
      if (import.meta.env.DEV) {
        console.log(`   Solution: ${cat.solution}\n`);
      }
    });

  /**
   * 2. Ê£ÄÊü•ÂâçÁ´ØÊú∫Âà∂
   */
  async checkFrontendMechanisms() {
    if (import.meta.env.DEV) {
      console.log('2Ô∏è‚É£ FRONTEND MECHANISMS CHECK');
    if (import.meta.env.DEV) {
      console.log('============================\n');
    }

    try {
      // Ê£ÄÊü•Pinia store
      const chatStore = window.app._instance.proxy.$pinia._s.get('chat');

      if (import.meta.env.DEV) {
        console.log('üì¶ Store State Analysis:');
      if (import.meta.env.DEV) {
        console.log(`   Current Chat ID: ${chatStore.currentChatId}`);
      if (import.meta.env.DEV) {
        console.log(`   Messages in memory: ${chatStore.messages.length}`);
      if (import.meta.env.DEV) {
        console.log(`   Cache keys: ${Object.keys(chatStore.messageCache).length}`);
      }

      // Ê£ÄÊü•Ê∂àÊÅØÁºìÂ≠ò
      const currentCache = chatStore.messageCache[chatStore.currentChatId];
      if (currentCache) {
        if (import.meta.env.DEV) {
          console.log(`   Current chat cache: ${currentCache.messages.length} messages`);
        if (import.meta.env.DEV) {
          console.log(`   Cache timestamp: ${new Date(currentCache.timestamp).toLocaleTimeString()}`);
        }

        // Ê£ÄÊü•ÊúÄËøëÁöÑÊ∂àÊÅØ
        const recentMessage = currentCache.messages[currentCache.messages.length - 1];
        if (recentMessage) {
          if (import.meta.env.DEV) {
            console.log(`   Latest cached message: ID ${recentMessage.id}, "${recentMessage.content}"`);
          if (import.meta.env.DEV) {
            console.log(`   Has server ID: ${!recentMessage.id.toString().startsWith('temp')}`);
          if (import.meta.env.DEV) {
            console.log(`   Is optimistic: ${recentMessage.isOptimistic || false}`);
          }
      } else {
        if (import.meta.env.DEV) {
          console.log('   ‚ö†Ô∏è No cache found for current chat');
        }

      // Ê£ÄÊü•ÊåÅ‰πÖÂåñÂ≠òÂÇ®
      if (import.meta.env.DEV) {
        console.log('\nüíæ Persistent Storage Check:');
      if (import.meta.env.DEV) {
        console.log(`   localStorage items: ${Object.keys(localStorage).length}`);
      if (import.meta.env.DEV) {
        console.log(`   sessionStorage items: ${Object.keys(sessionStorage).length}`);
      }

      // Ê£ÄÊü•ÊòØÂê¶ÊúâÊ∂àÊÅØÁõ∏ÂÖ≥ÁöÑÊåÅ‰πÖÂåñÊï∞ÊçÆ
      const messageKeys = Object.keys(localStorage).filter(key =>
        key.includes('message') || key.includes('chat') || key.includes('cache')
      );
      if (import.meta.env.DEV) {
        console.log(`   Message-related storage keys: ${messageKeys.join(', ') || 'none'}`);
      }

      this.testResults.push({
        test: 'Frontend Mechanisms',
        status: currentCache ? 'PASS' : 'FAIL',
        details: `${currentCache ? currentCache.messages.length : 0} messages in cache`
      });

    } catch (error) {
      if (import.meta.env.DEV) {
        console.error('‚ùå Frontend check failed:', error);
      this.testResults.push({
        test: 'Frontend Mechanisms',
        status: 'ERROR',
        details: error.message
      });

  /**
   * 3. Ê£ÄÊü•ÂêéÁ´ØÁä∂ÊÄÅ
   */
  async checkBackendStatus() {
    if (import.meta.env.DEV) {
      console.log('\n3Ô∏è‚É£ BACKEND STATUS CHECK');
    if (import.meta.env.DEV) {
      console.log('=======================\n');
    }

    try {
      const chatStore = window.app._instance.proxy.$pinia._s.get('chat');
      const currentChatId = chatStore.currentChatId;

      if (!currentChatId) {
        if (import.meta.env.DEV) {
          console.log('‚ö†Ô∏è No current chat selected');
        return;
      }

      if (import.meta.env.DEV) {
        console.log('üåê Testing API endpoints:');
      }

      // ÊµãËØïÊ∂àÊÅØËé∑ÂèñAPI
      const startTime = Date.now();
      const response = await fetch(`/api/chat/${currentChatId}/messages?limit=5`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
      });

      const endTime = Date.now();
      const responseTime = endTime - startTime;

      if (import.meta.env.DEV) {
        console.log(`   GET /api/chat/${currentChatId}/messages`);
      if (import.meta.env.DEV) {
        console.log(`   Status: ${response.status}`);
      if (import.meta.env.DEV) {
        console.log(`   Response time: ${responseTime}ms`);
      }

      if (response.ok) {
        const data = await response.json();
        const messages = data.data || data.messages || [];
        if (import.meta.env.DEV) {
          console.log(`   Messages returned: ${messages.length}`);
        }

        if (messages.length > 0) {
          if (import.meta.env.DEV) {
            console.log(`   Latest message: ID ${messages[0].id}, "${messages[0].content}"`);
          if (import.meta.env.DEV) {
            console.log(`   Created at: ${messages[0].created_at}`);
          }

        this.testResults.push({
          test: 'Backend API',
          status: 'PASS',
          details: `${messages.length} messages, ${responseTime}ms response time`
        });
      } else {
        if (import.meta.env.DEV) {
          console.log(`   ‚ùå API Error: ${response.status} ${response.statusText}`);
        this.testResults.push({
          test: 'Backend API',
          status: 'FAIL',
          details: `${response.status} ${response.statusText}`
        });

    } catch (error) {
      if (import.meta.env.DEV) {
        console.error('‚ùå Backend check failed:', error);
      this.testResults.push({
        test: 'Backend API',
        status: 'ERROR',
        details: error.message
      });

  /**
   * 4. Ê£ÄÊü•Êï∞ÊçÆÂ∫ìÊåÅ‰πÖÂåñ
   */
  async checkDatabasePersistence() {
    if (import.meta.env.DEV) {
      console.log('\n4Ô∏è‚É£ DATABASE PERSISTENCE CHECK');
    if (import.meta.env.DEV) {
      console.log('=============================\n');
    }

    if (import.meta.env.DEV) {
      console.log('üìã Instructions for manual verification:');
    if (import.meta.env.DEV) {
      console.log('1. Send a test message now');
    if (import.meta.env.DEV) {
      console.log('2. Note the message content and timestamp');
    if (import.meta.env.DEV) {
      console.log('3. Check browser Network tab for POST request');
    if (import.meta.env.DEV) {
      console.log('4. Look for response with message ID');
    if (import.meta.env.DEV) {
      console.log('5. Refresh the page');
    if (import.meta.env.DEV) {
      console.log('6. Check if message reappears');
    }

    if (import.meta.env.DEV) {
      console.log('\nüîç Automated checks:');
    }

    // Ê£ÄÊü•ÊúÄËøëÁöÑÊ∂àÊÅØÂèëÈÄÅ
    const perfMonitor = window.msgPerf || window.messagePerformanceMonitor;
    if (perfMonitor && perfMonitor.getStats) {
      const stats = perfMonitor.getStats();
      if (import.meta.env.DEV) {
        console.log(`   Recent sends: ${stats.totalSends || 0}`);
      if (import.meta.env.DEV) {
        console.log(`   Success rate: ${stats.successRate || 'N/A'}%`);
      if (import.meta.env.DEV) {
        console.log(`   Average response time: ${stats.avgResponseTime || 'N/A'}ms`);
      }

    this.testResults.push({
      test: 'Database Persistence',
      status: 'MANUAL',
      details: 'Requires manual verification through page refresh'
    });

  /**
   * 5. Ê£ÄÊü•ÁºìÂ≠òË°å‰∏∫
   */
  checkCacheBehavior() {
    if (import.meta.env.DEV) {
      console.log('\n5Ô∏è‚É£ CACHE BEHAVIOR ANALYSIS');
    if (import.meta.env.DEV) {
      console.log('==========================\n');
    }

    try {
      const chatStore = window.app._instance.proxy.$pinia._s.get('chat');

      if (import.meta.env.DEV) {
        console.log('üîÑ Cache Lifecycle Analysis:');
      }

      // ÂàÜÊûêÁºìÂ≠òÁ≠ñÁï•
      if (import.meta.env.DEV) {
        console.log('   Cache Strategy: In-memory with timeout');
      if (import.meta.env.DEV) {
        console.log('   Cache Timeout: 5 minutes');
      if (import.meta.env.DEV) {
        console.log('   Persistence: None (cleared on refresh)');
      }

      // ÂàÜÊûê‰πêËßÇÊõ¥Êñ∞ÊµÅÁ®ã
      if (import.meta.env.DEV) {
        console.log('\nüöÄ Optimistic Update Flow:');
      if (import.meta.env.DEV) {
        console.log('   1. Create temp message ‚Üí UI shows immediately');
      if (import.meta.env.DEV) {
        console.log('   2. Send API request ‚Üí POST /api/chat/{id}/messages');
      if (import.meta.env.DEV) {
        console.log('   3. Replace temp with real ‚Üí Server ID assigned');
      if (import.meta.env.DEV) {
        console.log('   4. Update cache ‚Üí Real message stored');
      }

      // ÈóÆÈ¢òÁÇπÂàÜÊûê
      if (import.meta.env.DEV) {
        console.log('\n‚ö†Ô∏è Potential Issue Points:');
      if (import.meta.env.DEV) {
        console.log('   ‚Ä¢ Cache not persistent across page reloads');
      if (import.meta.env.DEV) {
        console.log('   ‚Ä¢ Optimistic message replacement failure');
      if (import.meta.env.DEV) {
        console.log('   ‚Ä¢ Network error during API call');
      if (import.meta.env.DEV) {
        console.log('   ‚Ä¢ Session expiration during send');
      }

      // Ëß£ÂÜ≥ÊñπÊ°àÂàÜÊûê
      if (import.meta.env.DEV) {
        console.log('\nüí° Solution Categories:');
      if (import.meta.env.DEV) {
        console.log('   ‚Ä¢ HIGH-LEVEL: Implement persistent cache (localStorage/IndexedDB)');
      if (import.meta.env.DEV) {
        console.log('   ‚Ä¢ TECHNICAL: Fix optimistic update state management');
      if (import.meta.env.DEV) {
        console.log('   ‚Ä¢ FALLBACK: Add message recovery mechanisms');
      }

      this.testResults.push({
        test: 'Cache Behavior',
        status: 'ANALYZED',
        details: 'Non-persistent cache identified as primary issue'
      });

    } catch (error) {
      if (import.meta.env.DEV) {
        console.error('‚ùå Cache analysis failed:', error);
      this.testResults.push({
        test: 'Cache Behavior',
        status: 'ERROR',
        details: error.message
      });

  /**
   * 6. ÁîüÊàêÊúÄÁªàÊä•Âëä
   */
  generateFinalReport() {
    if (import.meta.env.DEV) {
      console.log('\nüìä FINAL DIAGNOSIS REPORT');
    if (import.meta.env.DEV) {
      console.log('=========================\n');
    }

    if (import.meta.env.DEV) {
      console.log('üîç Test Results Summary:');
    this.testResults.forEach(result => {
      const emoji = result.status === 'PASS' ? '‚úÖ' :
        result.status === 'FAIL' ? '‚ùå' :
          result.status === 'ERROR' ? 'üö®' : 'üìã';
      if (import.meta.env.DEV) {
        console.log(`   ${emoji} ${result.test}: ${result.status} - ${result.details}`);
      }
    });

    if (import.meta.env.DEV) {
      console.log('\nüéØ ROOT CAUSE ANALYSIS:');
    if (import.meta.env.DEV) {
      console.log('   Primary Issue: FRONTEND CACHE INVALIDATION');
    if (import.meta.env.DEV) {
      console.log('   Technical Term: Non-Persistent State Management');
    if (import.meta.env.DEV) {
      console.log('   Category: Frontend Architecture Problem');
    }

    if (import.meta.env.DEV) {
      console.log('\nüìã PROBLEM CLASSIFICATION:');
    if (import.meta.env.DEV) {
      console.log('   ‚Ä¢ Type: State Management Issue');
    if (import.meta.env.DEV) {
      console.log('   ‚Ä¢ Severity: High (affects user experience)');
    if (import.meta.env.DEV) {
      console.log('   ‚Ä¢ Scope: Frontend only (backend working correctly)');
    if (import.meta.env.DEV) {
      console.log('   ‚Ä¢ Pattern: Cache Purge on Page Reload');
    }

    if (import.meta.env.DEV) {
      console.log('\nüèóÔ∏è HIGH-LEVEL SOLUTIONS:');
    if (import.meta.env.DEV) {
      console.log('   1. PERSISTENT CACHE LAYER');
    if (import.meta.env.DEV) {
      console.log('      - Implement localStorage/IndexedDB for message cache');
    if (import.meta.env.DEV) {
      console.log('      - Restore cache on app initialization');
    if (import.meta.env.DEV) {
      console.log('      - Sync with server for consistency');
    }

    if (import.meta.env.DEV) {
      console.log('\n   2. IMPROVED STATE MANAGEMENT');
    if (import.meta.env.DEV) {
      console.log('      - Enhance optimistic update reliability');
    if (import.meta.env.DEV) {
      console.log('      - Add message state persistence');
    if (import.meta.env.DEV) {
      console.log('      - Implement recovery mechanisms');
    }

    if (import.meta.env.DEV) {
      console.log('\n   3. FALLBACK STRATEGIES');
    if (import.meta.env.DEV) {
      console.log('      - Auto-refetch on navigation');
    if (import.meta.env.DEV) {
      console.log('      - Message drafts preservation');
    if (import.meta.env.DEV) {
      console.log('      - Offline message queue');
    }

    if (import.meta.env.DEV) {
      console.log('\nüîß SPECIFIC TECHNICAL FIXES:');
    if (import.meta.env.DEV) {
      console.log('   ‚Ä¢ Add localStorage backup for message cache');
    if (import.meta.env.DEV) {
      console.log('   ‚Ä¢ Implement cache restoration on app load');
    if (import.meta.env.DEV) {
      console.log('   ‚Ä¢ Enhance optimistic message replacement logic');
    if (import.meta.env.DEV) {
      console.log('   ‚Ä¢ Add message persistence verification');
    }

    if (import.meta.env.DEV) {
      console.log('\nüìà IMPLEMENTATION PRIORITY:');
    if (import.meta.env.DEV) {
      console.log('   1. HIGH: Persistent message cache (solves 80% of cases)');
    if (import.meta.env.DEV) {
      console.log('   2. MEDIUM: Enhanced optimistic updates');
    if (import.meta.env.DEV) {
      console.log('   3. LOW: Advanced offline support');
    }

    if (import.meta.env.DEV) {
      console.log('\n‚úÖ NEXT STEPS:');
    if (import.meta.env.DEV) {
      console.log('   1. Implement persistent cache layer');
    if (import.meta.env.DEV) {
      console.log('   2. Test with message sending and refresh');
    if (import.meta.env.DEV) {
      console.log('   3. Verify cross-session persistence');
    if (import.meta.env.DEV) {
      console.log('   4. Add recovery mechanisms for edge cases');
    }

  /**
   * Âø´ÈÄüÊµãËØïÊ∂àÊÅØÊåÅ‰πÖÂåñ
   */
  async quickPersistenceTest() {
    if (import.meta.env.DEV) {
      console.log('\nüß™ QUICK PERSISTENCE TEST');
    if (import.meta.env.DEV) {
      console.log('========================\n');
    }

    const testMessage = `Test message ${Date.now()}`;

    try {
      const chatStore = window.app._instance.proxy.$pinia._s.get('chat');
      const currentChatId = chatStore.currentChatId;

      if (!currentChatId) {
        if (import.meta.env.DEV) {
          console.log('‚ùå No chat selected. Please open a chat first.');
        return;
      }

      if (import.meta.env.DEV) {
        console.log(`üìù Sending test message: "${testMessage}"`);
      }

      // ÂèëÈÄÅÊµãËØïÊ∂àÊÅØ
      await chatStore.sendMessage(currentChatId, { content: testMessage });

      if (import.meta.env.DEV) {
        console.log('‚úÖ Message sent successfully');
      if (import.meta.env.DEV) {
        console.log('\nüìã Manual verification steps:');
      if (import.meta.env.DEV) {
        console.log('1. Refresh the page (Cmd+R or F5)');
      if (import.meta.env.DEV) {
        console.log('2. Navigate back to this chat');
      if (import.meta.env.DEV) {
        console.log(`3. Look for message: "${testMessage}"`);
      if (import.meta.env.DEV) {
        console.log('4. If message appears ‚Üí Persistence WORKING');
      if (import.meta.env.DEV) {
        console.log('5. If message missing ‚Üí Persistence FAILED');
      }

    } catch (error) {
      if (import.meta.env.DEV) {
        console.error('‚ùå Test message send failed:', error);
      }

// ÂàõÂª∫ÂÖ®Â±ÄÂÆû‰æã
const messagePersistenceDiagnosis = new MessagePersistenceDiagnosis();

// ÂØºÂá∫Âà∞windowÂØπË±°
if (typeof window !== 'undefined') {
  window.persistDiag = {
    // ‰∏ªË¶ÅËØäÊñ≠ÊñπÊ≥ï
    diagnose: () => messagePersistenceDiagnosis.diagnoseMessagePersistence(),
    test: () => messagePersistenceDiagnosis.quickPersistenceTest(),

    // Âø´ÈÄüÊ£ÄÊü•ÊñπÊ≥ï
    checkCache: () => messagePersistenceDiagnosis.checkCacheBehavior(),
    checkFrontend: () => messagePersistenceDiagnosis.checkFrontendMechanisms(),
    checkBackend: () => messagePersistenceDiagnosis.checkBackendStatus(),

    // Âø´ÈÄüÈóÆÈ¢òÂàÜÁ±ª
    classify: () => messagePersistenceDiagnosis.analyzeProblemonCategories()
  };

  if (import.meta.env.DEV) {
    console.log('üîç Message Persistence Diagnosis Tool loaded');
  if (import.meta.env.DEV) {
    console.log('   Commands:');
  if (import.meta.env.DEV) {
    console.log('   - window.persistDiag.diagnose() - Complete diagnosis');
  if (import.meta.env.DEV) {
    console.log('   - window.persistDiag.test() - Quick persistence test');
  if (import.meta.env.DEV) {
    console.log('   - window.persistDiag.classify() - Problem classification');
  }

export default messagePersistenceDiagnosis; 