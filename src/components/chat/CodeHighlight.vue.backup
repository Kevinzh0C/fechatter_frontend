<template>
  <div class="code-highlight-container">
    <div v-if="hasLanguage" class="code-header">
      <span class="language-label">{{ displayLanguage }}</span>
      <button class="copy-button" @click="copyCode" :class="{ 'copied': copySuccess }"
        :title="copySuccess ? 'Copied!' : 'Copy code'">
        <svg v-if="!copySuccess" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor"
          stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round">
          <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
          <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
        </svg>
        <svg v-else width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5"
          stroke-linecap="round" stroke-linejoin="round">
          <polyline points="20,6 9,17 4,12"></polyline>
        </svg>
        <span class="copy-text">{{ copySuccess ? 'Copied' : 'Copy' }}</span>
      </button>
    </div>
    <pre class="code-block"
      :class="{ 'no-header': !hasLanguage }"><code ref="codeElement" :class="languageClass" v-html="highlightedCode"></code></pre>
  </div>
</template>

<script setup>
import { ref, computed, onMounted, nextTick } from 'vue';
import hljs from 'highlight.js/lib/core';

// Import commonly used languages for production
import javascript from 'highlight.js/lib/languages/javascript';
import typescript from 'highlight.js/lib/languages/typescript';
import python from 'highlight.js/lib/languages/python';
import java from 'highlight.js/lib/languages/java';
import cpp from 'highlight.js/lib/languages/cpp';
import csharp from 'highlight.js/lib/languages/csharp';
import php from 'highlight.js/lib/languages/php';
import go from 'highlight.js/lib/languages/go';
import rust from 'highlight.js/lib/languages/rust';
import ruby from 'highlight.js/lib/languages/ruby';
import sql from 'highlight.js/lib/languages/sql';
import json from 'highlight.js/lib/languages/json';
import xml from 'highlight.js/lib/languages/xml';
import css from 'highlight.js/lib/languages/css';
import bash from 'highlight.js/lib/languages/bash';
import yaml from 'highlight.js/lib/languages/yaml';
import markdown from 'highlight.js/lib/languages/markdown';

// Register languages
hljs.registerLanguage('javascript', javascript);
hljs.registerLanguage('js', javascript);
hljs.registerLanguage('typescript', typescript);
hljs.registerLanguage('ts', typescript);
hljs.registerLanguage('python', python);
hljs.registerLanguage('py', python);
hljs.registerLanguage('java', java);
hljs.registerLanguage('cpp', cpp);
hljs.registerLanguage('c++', cpp);
hljs.registerLanguage('c', cpp);
hljs.registerLanguage('csharp', csharp);
hljs.registerLanguage('cs', csharp);
hljs.registerLanguage('php', php);
hljs.registerLanguage('go', go);
hljs.registerLanguage('golang', go);
hljs.registerLanguage('rust', rust);
hljs.registerLanguage('rs', rust);
hljs.registerLanguage('ruby', ruby);
hljs.registerLanguage('rb', ruby);
hljs.registerLanguage('sql', sql);
hljs.registerLanguage('json', json);
hljs.registerLanguage('xml', xml);
hljs.registerLanguage('html', xml);
hljs.registerLanguage('css', css);
hljs.registerLanguage('bash', bash);
hljs.registerLanguage('sh', bash);
hljs.registerLanguage('shell', bash);
hljs.registerLanguage('yaml', yaml);
hljs.registerLanguage('yml', yaml);
hljs.registerLanguage('markdown', markdown);
hljs.registerLanguage('md', markdown);

const props = defineProps({
  code: {
    type: String,
    required: true
  },
  language: {
    type: String,
    default: null
  },
  autoDetect: {
    type: Boolean,
    default: true
  }
});

const codeElement = ref(null);
const copySuccess = ref(false);

// Language detection and display
const detectedLanguage = computed(() => {
  if (props.language) {
    return props.language.toLowerCase();
  }

  if (props.autoDetect && props.code.trim()) {
    try {
      const result = hljs.highlightAuto(props.code.trim(), [
        'javascript', 'typescript', 'python', 'java', 'cpp', 'csharp',
        'php', 'go', 'rust', 'ruby', 'sql', 'json', 'xml', 'css',
        'bash', 'yaml', 'markdown'
      ]);
      if (result.language && result.relevance > 5) {
        return result.language;
      }
    } catch (error) {
      console.warn('Language detection failed:', error);
    }
  }

  return null;
});

const hasLanguage = computed(() => !!detectedLanguage.value);

const displayLanguage = computed(() => {
  if (!detectedLanguage.value) return '';

  const languageMap = {
    'javascript': 'JavaScript',
    'js': 'JavaScript',
    'typescript': 'TypeScript',
    'ts': 'TypeScript',
    'python': 'Python',
    'py': 'Python',
    'java': 'Java',
    'cpp': 'C++',
    'c++': 'C++',
    'c': 'C',
    'csharp': 'C#',
    'cs': 'C#',
    'php': 'PHP',
    'go': 'Go',
    'golang': 'Go',
    'rust': 'Rust',
    'rs': 'Rust',
    'ruby': 'Ruby',
    'rb': 'Ruby',
    'sql': 'SQL',
    'json': 'JSON',
    'xml': 'XML',
    'html': 'HTML',
    'css': 'CSS',
    'bash': 'Bash',
    'sh': 'Shell',
    'shell': 'Shell',
    'yaml': 'YAML',
    'yml': 'YAML',
    'markdown': 'Markdown',
    'md': 'Markdown'
  };

  return languageMap[detectedLanguage.value] || detectedLanguage.value.toUpperCase();
});

const languageClass = computed(() => {
  return detectedLanguage.value ? `language-${detectedLanguage.value}` : '';
});

const highlightedCode = computed(() => {
  if (!props.code.trim()) return '';

  try {
    if (detectedLanguage.value && hljs.getLanguage(detectedLanguage.value)) {
      const result = hljs.highlight(props.code.trim(), {
        language: detectedLanguage.value,
        ignoreIllegals: true
      });
      return result.value;
    } else {
      // Auto-detect if no specific language
      const result = hljs.highlightAuto(props.code.trim());
      return result.value;
    }
  } catch (error) {
    console.warn('Code highlighting failed:', error);
    // Fallback to escaped plain text
    return props.code.trim()
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#39;');
  }
});

// Copy functionality
const copyCode = async () => {
  try {
    await navigator.clipboard.writeText(props.code.trim());
    copySuccess.value = true;
    setTimeout(() => {
      copySuccess.value = false;
    }, 2000);
  } catch (error) {
    console.warn('Copy failed:', error);
    // Fallback for older browsers
    try {
      const textArea = document.createElement('textarea');
      textArea.value = props.code.trim();
      document.body.appendChild(textArea);
      textArea.select();
      document.execCommand('copy');
      document.body.removeChild(textArea);
      copySuccess.value = true;
      setTimeout(() => {
        copySuccess.value = false;
      }, 2000);
    } catch (fallbackError) {
      console.error('Copy fallback failed:', fallbackError);
    }
  };

  onMounted(() => {
    // Apply highlighting after mount
    nextTick(() => {
      if (codeElement.value && !highlightedCode.value) {
        hljs.highlightElement(codeElement.value);
      }
    });
  });
</script>

<style scoped>
/* Fixed CSS structure for proper hot reload */
/* Import highlight.js theme */
@import 'highlight.js/styles/github.css';

.code-highlight-container {
  margin: 8px 0;
  border-radius: 8px;
  background: #fafbfc;
  border: 1px solid #e1e4e8;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.08);
  transition: all 0.2s ease;
  overflow: hidden;
  animation: slideInUp 0.3s ease-out;
}

@keyframes slideInUp {
  from {
    opacity: 0;
    transform: translateY(10px);
  }

  to {
    opacity: 1;
    transform: translateY(0);
  }

  .code-highlight-container:hover {
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.12);
    border-color: #d0d7de;
  }

  .code-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px 16px;
    background: linear-gradient(135deg, #f6f8fa 0%, #f1f3f4 100%);
    border-bottom: 1px solid #e1e4e8;
    font-size: 12px;
    backdrop-filter: blur(8px);
  }

  .language-label {
    font-weight: 700;
    color: #24292f;
    text-transform: uppercase;
    font-size: 10px;
    letter-spacing: 0.5px;
    background: #e1e4e8;
    padding: 2px 8px;
    border-radius: 12px;
    border: 1px solid #d0d7de;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
    transition: all 0.2s ease;
    backdrop-filter: blur(4px);
  }

  .language-label:hover {
    background: #d0d7de;
    border-color: #8c959f;
    transform: translateY(-0.5px);
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
  }

  .copy-button {
    display: flex;
    align-items: center;
    padding: 6px 12px;
    gap: 6px;
    background: transparent;
    border: 1px solid #d0d7de;
    border-radius: 6px;
    color: #24292f;
    cursor: pointer;
    transition: all 0.2s ease;
    font-size: 12px;
    font-weight: 500;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
    min-width: 70px;
    justify-content: center;
    backdrop-filter: blur(4px);
  }

  .copy-button:hover {
    background: #f3f4f6;
    border-color: #8c959f;
    transform: translateY(-1px);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .copy-button:hover .copy-text {
    opacity: 1;
  }

  .copy-button.copied {
    background: #dcfce7;
    border-color: #86efac;
    color: #166534;
    transform: scale(0.95);
    animation: copySuccess 0.6s ease;
  }

  .copy-button.copied .copy-text {
    opacity: 1;
    color: #166534;
  }

  @keyframes copySuccess {
    0% {
      transform: scale(1);
    }

    50% {
      transform: scale(1.1);
      box-shadow: 0 0 20px rgba(74, 222, 128, 0.4);
    }

    100% {
      transform: scale(0.95);
    }

    .copy-button:active {
      transform: scale(0.9);
    }

    .copy-text {
      font-size: 11px;
      font-weight: 600;
      letter-spacing: 0.2px;
      opacity: 0.9;
    }

    .code-block {
      margin: 0;
      padding: 16px 20px;
      background: #ffffff;
      overflow-x: auto;
      font-family: 'SF Mono', 'Monaco', 'Inconsolata', 'Roboto Mono', 'Source Code Pro', monospace;
      font-size: 14px;
      line-height: 1.5;
      border-radius: 0;
      position: relative;
    }

    .code-block.no-header {
      border-radius: 8px;
      padding: 20px;
    }

    .code-block code {
      background: transparent;
      padding: 0;
      border: none;
      font-family: inherit;
      color: inherit;
      font-variant-ligatures: common-ligatures;
    }

    /* Enhanced highlight.js styles - VS Code inspired */
    .code-block :deep(.hljs) {
      background: transparent;
      color: #24292e;
    }

    .code-block :deep(.hljs-comment),
    .code-block :deep(.hljs-quote) {
      color: #6a737d;
      font-style: italic;
      opacity: 0.8;
    }

    .code-block :deep(.hljs-keyword),
    .code-block :deep(.hljs-selector-tag),
    .code-block :deep(.hljs-literal) {
      color: #cf222e;
      font-weight: 600;
    }

    .code-block :deep(.hljs-string),
    .code-block :deep(.hljs-doctag) {
      color: #0a3069;
    }

    .code-block :deep(.hljs-number),
    .code-block :deep(.hljs-variable),
    .code-block :deep(.hljs-template-variable),
    .code-block :deep(.hljs-tag .hljs-attr) {
      color: #0969da;
    }

    .code-block :deep(.hljs-function),
    .code-block :deep(.hljs-title) {
      color: #8250df;
      font-weight: 600;
    }

    .code-block :deep(.hljs-attr),
    .code-block :deep(.hljs-name),
    .code-block :deep(.hljs-attribute) {
      color: #953800;
    }

    .code-block :deep(.hljs-builtin-name),
    .code-block :deep(.hljs-built_in) {
      color: #0969da;
      font-weight: 500;
    }

    /* Enhanced scrollbar styling */
    .code-block::-webkit-scrollbar {
      height: 12px;
    }

    .code-block::-webkit-scrollbar-track {
      background: #f6f8fa;
      border-radius: 4px;
    }

    .code-block::-webkit-scrollbar-thumb {
      background: #d0d7de;
      border-radius: 4px;
      border: 2px solid #f6f8fa;
    }

    .code-block::-webkit-scrollbar-thumb:hover {
      background: #8c959f;
    }

    /* Dark mode - VS Code Dark+ inspired */
    @media (prefers-color-scheme: dark) {
      .code-highlight-container {
        background: #1e1e1e;
        border-color: #3e3e42;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
      }

      .code-highlight-container:hover {
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
        border-color: #525252;
      }

      .code-header {
        background: linear-gradient(135deg, #252526 0%, #2d2d30 100%);
        border-color: #3e3e42;
      }

      .language-label {
        color: #cccccc;
        background: #3e3e42;
        border-color: #525252;
      }

      .copy-button {
        color: #cccccc;
        border-color: #525252;
      }

      .copy-button:hover {
        background: #3e3e42;
        border-color: #6e6e6e;
      }

      .copy-button.copied {
        background: #1e3a1e;
        border-color: #4caf50;
        color: #81c784;
      }

      .copy-button:hover .copy-text {
        color: #ffffff;
      }

      .copy-button.copied .copy-text {
        color: #81c784;
        opacity: 1;
      }

      .code-block {
        background: #1e1e1e;
      }

      .code-block :deep(.hljs) {
        color: #d4d4d4;
      }

      .code-block :deep(.hljs-comment),
      .code-block :deep(.hljs-quote) {
        color: #6a9955;
      }

      .code-block :deep(.hljs-keyword),
      .code-block :deep(.hljs-selector-tag),
      .code-block :deep(.hljs-literal) {
        color: #569cd6;
      }

      .code-block :deep(.hljs-string),
      .code-block :deep(.hljs-doctag) {
        color: #ce9178;
      }

      .code-block :deep(.hljs-number),
      .code-block :deep(.hljs-variable),
      .code-block :deep(.hljs-template-variable),
      .code-block :deep(.hljs-tag .hljs-attr) {
        color: #b5cea8;
      }

      .code-block :deep(.hljs-function),
      .code-block :deep(.hljs-title) {
        color: #dcdcaa;
      }

      .code-block :deep(.hljs-attr),
      .code-block :deep(.hljs-name),
      .code-block :deep(.hljs-attribute) {
        color: #9cdcfe;
      }

      .code-block::-webkit-scrollbar-track {
        background: #1e1e1e;
      }

      .code-block::-webkit-scrollbar-thumb {
        background: #424242;
        border-color: #1e1e1e;
      }

      .code-block::-webkit-scrollbar-thumb:hover {
        background: #525252;
      }

      /* Responsive design - Enhanced */
      @media (max-width: 768px) {
        .code-block {
          font-size: 13px;
          padding: 12px 16px;
          line-height: 1.4;
        }

        .code-header {
          padding: 8px 12px;
        }

        .copy-button {
          padding: 4px 8px;
          min-width: 60px;
          gap: 4px;
        }

        .language-label {
          font-size: 9px;
          padding: 1px 6px;
        }

        .copy-text {
          font-size: 10px;
        }</style>