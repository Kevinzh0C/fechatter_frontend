<template>
  <div class="message-input" :class="{ 'has-preview': showPreview }">
    <!-- Preview Container (at top) -->
    <div v-if="showPreview" class="preview-container">
      <div class="preview-header">
        <span class="preview-title">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
            <circle cx="12" cy="12" r="3"></circle>
          </svg>
          {{ getPreviewTitle() }}
        </span>
        <button @click="closePreview" class="preview-close">√ó</button>
      </div>
      <div class="preview-content">
        <!-- Markdown Preview -->
        <div v-if="formatMode === 'markdown'" class="markdown-preview" v-html="renderedMarkdown"></div>

        <!-- Code Preview -->
        <div v-else-if="formatMode === 'code'" class="code-preview">
          <div class="code-header">
            <select v-model="selectedLanguage" class="language-selector" @change="highlightCodePreview">
              <option value="javascript">JavaScript</option>
              <option value="typescript">TypeScript</option>
              <option value="python">Python</option>
              <option value="rust">Rust</option>
              <option value="html">HTML</option>
              <option value="css">CSS</option>
              <option value="json">JSON</option>
              <option value="sql">SQL</option>
              <option value="bash">Bash</option>
              <option value="go">Go</option>
              <option value="java">Java</option>
              <option value="cpp">C++</option>
              <option value="php">PHP</option>
              <option value="yaml">YAML</option>
              <option value="xml">XML</option>
              <option value="dockerfile">Dockerfile</option>
            </select>
            <span class="code-info">{{ messageContent.split('\n').length }} lines</span>
          </div>

          <!-- ‚ú® ÊõøÊç¢‰∏∫ÁúüÊ≠£ÁöÑËØ≠Ê≥ïÈ´ò‰∫ÆÈ¢ÑËßà -->
          <div class="code-content-wrapper">
            <div v-if="isHighlightingCode" class="code-loading">
              <div class="loading-spinner"></div>
              <span>Highlighting code...</span>
            </div>
            <div v-else-if="codeHighlightError" class="code-error">
              <div class="error-icon">‚ö†Ô∏è</div>
              <span>{{ codeHighlightError }}</span>
              <button @click="highlightCodePreview" class="retry-btn">Retry</button>
            </div>
            <div v-else-if="highlightedCodePreview" class="highlighted-code-preview" v-html="highlightedCodePreview">
            </div>
            <pre v-else class="code-placeholder"><code>{{ messageContent || 'Start typing code...' }}</code></pre>
          </div>
        </div>

        <!-- File Preview -->
        <div v-else-if="formatMode === 'file'" class="file-preview">
          <!-- üîß DEBUG: Ê∑ªÂä†Ë∞ÉËØï‰ø°ÊÅØ -->
          <div v-if="import.meta.env.DEV" class="debug-info"
            style="background: #fef5e7; padding: 10px; margin: 10px 0; border-radius: 6px; font-size: 12px;">
            <strong>üîç Debug Info:</strong><br>
            formatMode: {{ formatMode }}<br>
            selectedFile: {{ selectedFile ? selectedFile.name : 'null' }}<br>
            showFilePreview: {{ showFilePreview }}<br>
            Condition (!selectedFile): {{ !selectedFile }}<br>
            Should show FilePreview: {{ !!selectedFile }}
          </div>

          <div class="file-upload-area" v-if="!selectedFile">
            <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1">
              <path d="M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z" />
            </svg>
            <p>Click to select a file or drag and drop</p>
            <button @click="triggerFileUpload" class="upload-btn">Select File</button>
          </div>

          <!-- üéØ FilePreviewÁªÑ‰ª∂ - Áªü‰∏ÄÊñá‰ª∂È¢ÑËßàÂíå‰∏ä‰º† -->
          <FilePreview v-else-if="selectedFile" :file="selectedFile" @file-uploaded="handleFileUploaded"
            @upload-error="handleFileUploadError" @file-removed="handleFileRemoved"
            @trigger-upload="triggerFileUpload" />

          <!-- üîß DEBUG: Â¶ÇÊûúÊó¢Ê≤°ÊúâÊñá‰ª∂‰πüÊ≤°ÊúâÊòæÁ§∫FilePreviewÔºåÊòæÁ§∫ÈîôËØØÁä∂ÊÄÅ -->
          <div v-else-if="import.meta.env.DEV" class="debug-error"
            style="background: #fed7d7; padding: 10px; border-radius: 6px;">
            <strong>‚ùå Error:</strong> selectedFile is falsy but should show FilePreview<br>
            selectedFile: {{ selectedFile }}<br>
            Type: {{ typeof selectedFile }}
          </div>
        </div>
      </div>
    </div>

    <!-- Enhanced Markdown Toolbar (in middle) -->
    <div v-if="formatMode === 'markdown'" class="markdown-toolbar">
      <!-- Text Formatting Section -->
      <div class="toolbar-section">
        <button @click="insertMarkdown('**', '**')" class="toolbar-btn" title="Bold (Ctrl+B)">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M6 4h8a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z"></path>
            <path d="M6 12h9a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z"></path>
          </svg>
        </button>
        <button @click="insertMarkdown('*', '*')" class="toolbar-btn" title="Italic (Ctrl+I)">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <line x1="19" y1="4" x2="10" y2="4"></line>
            <line x1="14" y1="20" x2="5" y2="20"></line>
            <line x1="15" y1="4" x2="9" y2="20"></line>
          </svg>
        </button>
        <button @click="insertMarkdown('~~', '~~')" class="toolbar-btn" title="Strikethrough">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M16 4H9a3 3 0 0 0-2.83 4M14 12a4 4 0 0 1 0 8H6"></path>
            <line x1="4" y1="12" x2="20" y2="12"></line>
          </svg>
        </button>
        <button @click="insertMarkdown('==', '==')" class="toolbar-btn" title="Highlight">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M9 11H4a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2h5m6 6v3a2 2 0 0 1-2 2H7l-3-3 3-3h6a2 2 0 0 1 2 2z"></path>
            <path d="M19 7h2a2 2 0 0 1 2 2v2a2 2 0 0 1-2 2h-2"></path>
          </svg>
        </button>
        <button @click="insertMarkdown('`', '`')" class="toolbar-btn" title="Inline Code">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="16,18 22,12 16,6"></polyline>
            <polyline points="8,6 2,12 8,18"></polyline>
          </svg>
        </button>
      </div>

      <div class="toolbar-divider"></div>

      <!-- Structure Section -->
      <div class="toolbar-section">
        <button @click="insertMarkdown('# ', '')" class="toolbar-btn" title="H1 Heading">
          <span class="text-btn">H1</span>
        </button>
        <button @click="insertMarkdown('## ', '')" class="toolbar-btn" title="H2 Heading">
          <span class="text-btn">H2</span>
        </button>
        <button @click="insertMarkdown('### ', '')" class="toolbar-btn" title="H3 Heading">
          <span class="text-btn">H3</span>
        </button>
        <button @click="insertMarkdown('- ', '')" class="toolbar-btn" title="Unordered List">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <line x1="8" y1="6" x2="21" y2="6"></line>
            <line x1="8" y1="12" x2="21" y2="12"></line>
            <line x1="8" y1="18" x2="21" y2="18"></line>
            <line x1="3" y1="6" x2="3.01" y2="6"></line>
            <line x1="3" y1="12" x2="3.01" y2="12"></line>
            <line x1="3" y1="18" x2="3.01" y2="18"></line>
          </svg>
        </button>
        <button @click="insertMarkdown('1. ', '')" class="toolbar-btn" title="Ordered List">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <line x1="10" y1="6" x2="21" y2="6"></line>
            <line x1="10" y1="12" x2="21" y2="12"></line>
            <line x1="10" y1="18" x2="21" y2="18"></line>
            <line x1="4" y1="6" x2="4" y2="10"></line>
            <line x1="4" y1="10" x2="6" y2="10"></line>
            <line x1="6" y1="10" x2="6" y2="6"></line>
          </svg>
        </button>
        <button @click="insertMarkdown('- [ ] ', '')" class="toolbar-btn" title="Task List">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="9,11 12,14 22,4"></polyline>
            <path d="M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11"></path>
          </svg>
        </button>
      </div>

      <div class="toolbar-divider"></div>

      <!-- Content Section -->
      <div class="toolbar-section">
        <button @click="insertMarkdown('> ', '')" class="toolbar-btn" title="Quote">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path
              d="M3 21c3 0 7-1 7-8V5c0-1.25-.756-2.017-2-2H4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2 1 0 1 0 1 1v1c0 1-1 2-2 2s-1 .008-1 1.031V20c0 1 0 1 1 1z">
            </path>
            <path
              d="M15 21c3 0 7-1 7-8V5c0-1.25-.757-2.017-2-2h-4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2 1 0 1 0 1 1v1c0 1-1 2-2 2s-1 .008-1 1.031V20c0 1 0 1 1 1z">
            </path>
          </svg>
        </button>
        <button @click="insertCodeBlock" class="toolbar-btn" title="Code Block">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <rect x="2" y="3" width="20" height="14" rx="2" ry="2"></rect>
            <line x1="8" y1="21" x2="16" y2="21"></line>
            <line x1="12" y1="17" x2="12" y2="21"></line>
          </svg>
        </button>
        <button @click="insertMarkdown('[', '](url)')" class="toolbar-btn" title="Link (Ctrl+K)">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"></path>
            <path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"></path>
          </svg>
        </button>
        <button @click="insertMarkdown('![alt](', ')')" class="toolbar-btn" title="Image">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
            <circle cx="8.5" cy="8.5" r="1.5"></circle>
            <polyline points="21,15 16,10 5,21"></polyline>
          </svg>
        </button>
        <button @click="insertTable" class="toolbar-btn" title="Table">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path
              d="M9 3H5a2 2 0 0 0-2 2v4m6-6h10a2 2 0 0 1 2 2v4M9 3v18m0 0h10a2 2 0 0 0 2-2V9M9 21H5a2 2 0 0 1-2-2V9m0 0h18">
            </path>
          </svg>
        </button>
        <button @click="insertMarkdown('---\n', '\n')" class="toolbar-btn" title="Horizontal Rule">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <line x1="3" y1="12" x2="21" y2="12"></line>
          </svg>
        </button>
      </div>

      <div class="toolbar-divider"></div>

      <!-- Actions Section -->
      <div class="toolbar-section">
        <button @click="toggleMarkdownPreview" class="toolbar-btn" :class="{ active: showPreview }" title="Preview">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
            <circle cx="12" cy="12" r="3"></circle>
          </svg>
        </button>
        <button @click="clearContent" class="toolbar-btn" title="Clear All">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="3,6 5,6 21,6"></polyline>
            <path d="M19,6V20A2,2 0 0,1 17,20H7A2,2 0 0,1 5,20V6M8,6V4A2,2 0 0,1 10,4H14A2,2 0 0,1 16,4V6">
            </path>
          </svg>
        </button>
      </div>
    </div>

    <!-- Main Input Area (at bottom) -->
    <div class="main-input-area">
      <!-- üöÄ ENHANCED: Êõ¥ÊòéÊòæÁöÑÊñá‰ª∂‰∏ä‰º†ÊåâÈíÆ -->
      <button @click="triggerFileUpload" class="input-btn file-btn enhanced-file-btn"
        :class="{ active: formatMode === 'file' }" title="ÈÄâÊã©Êñá‰ª∂‰∏ä‰º†">
        <div class="file-btn-content">
          <!-- Êñá‰ª∂Â§πÂõæÊ†á -->
          <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z" />
          </svg>
          <span class="file-btn-text">üìé</span>
        </div>
      </button>

      <!-- Input Container -->
      <div class="input-container">
        <textarea ref="messageInput" v-model="messageContent" @keydown="handleKeyDown" @input="handleInput"
          @paste="handlePaste" :placeholder="placeholderText" class="message-textarea" rows="1">
        </textarea>

        <!-- üöÄ NEW: ËæìÂÖ•Ê°ÜÂÜÖÁöÑÊñá‰ª∂‰∏ä‰º†ÊèêÁ§∫ -->
        <div v-if="!messageContent.trim() && !selectedFile && !uploadedFileUrl" class="upload-hint"
          @click="triggerFileUpload">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z" />
          </svg>
          <span>ÁÇπÂáªÊàñÊãñÊãΩÊñá‰ª∂Âà∞Ê≠§Â§Ñ</span>
        </div>
      </div>

      <!-- Mode Button -->
      <button @click="cycleFormatMode" class="input-btn mode-btn" :class="{
        'mode-markdown': formatMode === 'markdown',
        'mode-code': formatMode === 'code'
      }" :title="getFormatModeTooltip()">
        <svg v-if="formatMode === 'text'" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor"
          stroke-width="2">
          <path d="M4 7V4h16v3M9 20h6M12 4v16"></path>
        </svg>
        <svg v-else-if="formatMode === 'markdown'" width="20" height="20" viewBox="0 0 24 24" fill="none"
          stroke="currentColor" stroke-width="2">
          <path d="M3 5h18v14H3zM7 15V9l2 2 2-2v6m3-2h4"></path>
        </svg>
        <svg v-else width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <polyline points="16,18 22,12 16,6"></polyline>
          <polyline points="8,6 2,12 8,18"></polyline>
        </svg>
      </button>

      <!-- Emoji Button -->
      <button @click="toggleEmojiPicker" class="input-btn emoji-btn" title="Add emoji">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <circle cx="12" cy="12" r="10"></circle>
          <path d="M8 14s1.5 2 4 2 4-2 4-2"></path>
          <line x1="9" y1="9" x2="9.01" y2="9"></line>
          <line x1="15" y1="9" x2="15.01" y2="9"></line>
        </svg>
      </button>

      <!-- Enhanced Send Button with Dynamic State -->
      <button @click="sendMessage" :disabled="!canSend" class="input-btn send-btn" :class="{
        'active': canSend,
        'empty': !messageContent.trim(),
        'filled': messageContent.trim(),
        'pulse': canSend && messageContent.trim().length > 5
      }">
        <svg v-if="!isSending" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor"
          stroke-width="2">
          <line x1="22" y1="2" x2="11" y2="13"></line>
          <polygon points="22,2 15,22 11,13 2,9"></polygon>
        </svg>
        <div v-else class="loading-spinner"></div>
      </button>
    </div>

    <!-- üöÄ NEW: Áã¨Á´ãÁöÑÊñá‰ª∂‰∏ä‰º†Âå∫ÂüüÔºàÂΩìÊ≤°ÊúâÊñá‰ª∂Êó∂ÊòæÁ§∫Ôºâ -->
    <div v-if="!selectedFile && !uploadedFileUrl && !showPreview" class="file-upload-zone">
      <div class="upload-zone-content" @click="triggerFileUpload" @drop="handleDrop" @dragover.prevent
        @dragenter.prevent>
        <div class="upload-icon">
          <svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z" />
          </svg>
        </div>
        <div class="upload-text">
          <div class="upload-title">üìé Ê∑ªÂä†Êñá‰ª∂</div>
          <div class="upload-subtitle">ÁÇπÂáªÈÄâÊã©ÊàñÊãñÊãΩÊñá‰ª∂Âà∞Ê≠§Â§Ñ</div>
        </div>
      </div>
    </div>

    <!-- Production Emoji Modal - üöÄ FIXED: ÊòæÁ§∫Âú®ËæìÂÖ•Ê°Ü‰∏äÊñπ -->
    <div v-if="showEmojiPicker" class="emoji-modal-overlay" @click="closeEmojiPicker">
      <div class="emoji-modal" @click.stop ref="emojiPickerRef">
        <div class="emoji-header">
          <h3>Choose Emoji</h3>
          <button @click="closeEmojiPicker" class="emoji-close">√ó</button>
        </div>

        <div class="emoji-search">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <circle cx="11" cy="11" r="8"></circle>
            <path d="m21 21-4.35-4.35"></path>
          </svg>
          <input v-model="emojiSearchQuery" type="text" placeholder="Search emojis..." @input="filterEmojis">
        </div>

        <div class="emoji-categories">
          <button v-for="(category, key) in emojiCategories" :key="key" @click="selectEmojiCategory(key)"
            class="category-btn" :class="{ active: selectedEmojiCategory === key }" :title="category.name">
            {{ category.icon }}
          </button>
        </div>

        <div class="emoji-content">
          <div v-if="filteredEmojis.length > 0" class="emoji-grid">
            <button v-for="emoji in filteredEmojis" :key="emoji.char" @click="insertEmoji(emoji)" class="emoji-item"
              :title="emoji.name">
              {{ emoji.char }}
            </button>
          </div>
          <div v-else class="no-emojis">
            <svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1">
              <circle cx="11" cy="11" r="8"></circle>
              <path d="m21 21-4.35-4.35"></path>
            </svg>
            <p>No emojis found</p>
          </div>
        </div>
      </div>
    </div>

    <!-- Hidden file input - Single file selection -->
    <input ref="fileInput" type="file" @change="handleFileSelect" style="display: none"
      accept="image/*,video/*,audio/*,.pdf,.doc,.docx,.txt,.json,.yaml,.yml">

    <!-- File Preview Container - Simplified for single file workflow -->
    <div v-if="showPreview && formatMode === 'file'" class="preview-container">
      <div class="preview-header">
        <h4>{{ getPreviewTitle() }}</h4>
        <div class="preview-controls">
          <button @click="closePreview" class="preview-close">√ó</button>
        </div>
      </div>

      <div class="preview-content file-preview">
        <!-- üìÅ FilePreviewÁªÑ‰ª∂Â§ÑÁêÜÊâÄÊúâÊñá‰ª∂ÊòæÁ§∫Âíå‰∏ä‰º† -->
        <div class="file-preview-info">
          <p>File preview and upload are handled by the FilePreview component above.</p>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, computed, nextTick, onMounted, onUnmounted, watch } from 'vue';
import { marked } from 'marked';
import DOMPurify from 'dompurify';
import { highlightCodeAsync } from '@/utils/codeHighlight';
import FilePreview from './MessageInput/FilePreview.vue';

const props = defineProps({
  chatId: { type: [Number, String], required: true },
  replyToMessage: { type: Object, default: null },
  disabled: { type: Boolean, default: false },
  maxLength: { type: Number, default: 2000 }
});

const emit = defineEmits(['message-sent', 'reply-cancelled', 'preview-state-change']);

// State
const messageContent = ref('');
const showPreview = ref(false);
const formatMode = ref('text'); // 'text', 'markdown', 'code', 'file'
const isSending = ref(false);
const showEmojiPicker = ref(false);
const selectedLanguage = ref('javascript');
// üéØ MessageInput Âè™ÁÆ°ÁêÜÊñá‰ª∂ÈÄâÊã©Ôºå‰∏çÂ§ÑÁêÜ‰∏ä‰º†
const selectedFile = ref(null); // üìÅ ÂΩìÂâçÈÄâ‰∏≠ÁöÑÊñá‰ª∂
const showFilePreview = ref(false); // üìã ÊòØÂê¶ÊòæÁ§∫FilePreviewÁªÑ‰ª∂
const uploadedFileUrl = ref(null); // üîó FilePreviewËøîÂõûÁöÑ‰∏ä‰º†ÁªìÊûúURL
const selectedEmojiCategory = ref('smileys');
const emojiSearchQuery = ref('');

// ‚ú® Êñ∞Â¢ûÔºö‰ª£Á†ÅÈ´ò‰∫ÆÁõ∏ÂÖ≥Áä∂ÊÄÅ
const highlightedCodePreview = ref('')
const isHighlightingCode = ref(false)
const codeHighlightError = ref(null)

// Refs
const messageInput = ref(null);
const emojiPickerRef = ref(null);
const fileInput = ref(null);

// Production-grade emoji categories
const emojiCategories = {
  smileys: {
    name: 'Smileys & People',
    icon: 'üòÄ',
    emojis: [
      { char: 'üòÄ', name: 'grinning face' },
      { char: 'üòÉ', name: 'grinning face with big eyes' },
      { char: 'üòÑ', name: 'grinning face with smiling eyes' },
      { char: 'üòÅ', name: 'beaming face with smiling eyes' },
      { char: 'üòÜ', name: 'grinning squinting face' },
      { char: 'üòÖ', name: 'grinning face with sweat' },
      { char: 'ü§£', name: 'rolling on the floor laughing' },
      { char: 'üòÇ', name: 'face with tears of joy' },
      { char: 'üôÇ', name: 'slightly smiling face' },
      { char: 'üôÉ', name: 'upside-down face' },
      { char: 'üòâ', name: 'winking face' },
      { char: 'üòä', name: 'smiling face with smiling eyes' },
      { char: 'üòá', name: 'smiling face with halo' },
      { char: 'ü•∞', name: 'smiling face with hearts' },
      { char: 'üòç', name: 'smiling face with heart-eyes' },
      { char: 'ü§©', name: 'star-struck' },
      { char: 'üòò', name: 'face blowing a kiss' },
      { char: 'üòó', name: 'kissing face' },
      { char: 'üòö', name: 'kissing face with closed eyes' },
      { char: 'üòô', name: 'kissing face with smiling eyes' },
      { char: 'ü•≤', name: 'smiling face with tear' },
      { char: 'üòã', name: 'face savoring food' },
      { char: 'üòõ', name: 'face with tongue' },
      { char: 'üòú', name: 'winking face with tongue' },
      { char: 'ü§™', name: 'zany face' },
      { char: 'üòù', name: 'squinting face with tongue' },
      { char: 'ü§ë', name: 'money-mouth face' },
      { char: 'ü§ó', name: 'hugging face' },
      { char: 'ü§≠', name: 'face with hand over mouth' },
      { char: 'ü§´', name: 'shushing face' },
      { char: 'ü§î', name: 'thinking face' },
      { char: 'ü§ê', name: 'zipper-mouth face' },
      { char: 'ü§®', name: 'face with raised eyebrow' },
      { char: 'üòê', name: 'neutral face' },
      { char: 'üòë', name: 'expressionless face' },
      { char: 'üò∂', name: 'face without mouth' },
      { char: 'üò∂‚Äçüå´Ô∏è', name: 'face in clouds' },
      { char: 'üòè', name: 'smirking face' },
      { char: 'üòí', name: 'unamused face' },
      { char: 'üôÑ', name: 'face with rolling eyes' },
      { char: 'üò¨', name: 'grimacing face' },
      { char: 'üòÆ‚Äçüí®', name: 'face exhaling' },
      { char: 'ü§•', name: 'lying face' },
      { char: 'üòî', name: 'pensive face' },
      { char: 'üò™', name: 'sleepy face' },
      { char: 'ü§§', name: 'drooling face' },
      { char: 'üò¥', name: 'sleeping face' },
      { char: 'üò∑', name: 'face with medical mask' },
      { char: 'ü§í', name: 'face with thermometer' },
      { char: 'ü§ï', name: 'face with head-bandage' },
      { char: 'ü§¢', name: 'nauseated face' },
      { char: 'ü§Æ', name: 'face vomiting' },
      { char: 'ü§ß', name: 'sneezing face' },
      { char: 'ü•µ', name: 'hot face' },
      { char: 'ü•∂', name: 'cold face' },
      { char: 'ü•¥', name: 'woozy face' },
      { char: 'üòµ', name: 'dizzy face' },
      { char: 'üòµ‚Äçüí´', name: 'face with spiral eyes' },
      { char: 'ü§Ø', name: 'exploding head' },
      { char: 'ü§†', name: 'cowboy hat face' },
      { char: 'ü•≥', name: 'partying face' },
      { char: 'ü•∏', name: 'disguised face' },
      { char: 'üòé', name: 'smiling face with sunglasses' },
      { char: 'ü§ì', name: 'nerd face' },
      { char: 'üßê', name: 'face with monocle' }
    ]
  },
  gestures: {
    name: 'Gestures',
    icon: 'üëç',
    emojis: [
      { char: 'üëç', name: 'thumbs up' },
      { char: 'üëé', name: 'thumbs down' },
      { char: 'üëå', name: 'OK hand' },
      { char: 'ü§å', name: 'pinched fingers' },
      { char: 'ü§è', name: 'pinching hand' },
      { char: '‚úåÔ∏è', name: 'victory hand' },
      { char: 'ü§û', name: 'crossed fingers' },
      { char: 'ü§ü', name: 'love-you gesture' },
      { char: 'ü§ò', name: 'sign of the horns' },
      { char: 'ü§ô', name: 'call me hand' },
      { char: 'üëà', name: 'backhand index pointing left' },
      { char: 'üëâ', name: 'backhand index pointing right' },
      { char: 'üëÜ', name: 'backhand index pointing up' },
      { char: 'üñï', name: 'middle finger' },
      { char: 'üëá', name: 'backhand index pointing down' },
      { char: '‚òùÔ∏è', name: 'index pointing up' },
      { char: 'üëã', name: 'waving hand' },
      { char: 'ü§ö', name: 'raised back of hand' },
      { char: 'üñêÔ∏è', name: 'hand with fingers splayed' },
      { char: '‚úã', name: 'raised hand' },
      { char: 'üññ', name: 'vulcan salute' },
      { char: 'üëè', name: 'clapping hands' },
      { char: 'üôå', name: 'raising hands' },
      { char: 'üëê', name: 'open hands' },
      { char: 'ü§≤', name: 'palms up together' },
      { char: 'ü§ù', name: 'handshake' },
      { char: 'üôè', name: 'folded hands' }
    ]
  },
  hearts: {
    name: 'Hearts',
    icon: '‚ù§Ô∏è',
    emojis: [
      { char: '‚ù§Ô∏è', name: 'red heart' },
      { char: 'üß°', name: 'orange heart' },
      { char: 'üíõ', name: 'yellow heart' },
      { char: 'üíö', name: 'green heart' },
      { char: 'üíô', name: 'blue heart' },
      { char: 'üíú', name: 'purple heart' },
      { char: 'üñ§', name: 'black heart' },
      { char: 'ü§ç', name: 'white heart' },
      { char: 'ü§é', name: 'brown heart' },
      { char: 'üíî', name: 'broken heart' },
      { char: '‚ù£Ô∏è', name: 'heart exclamation' },
      { char: 'üíï', name: 'two hearts' },
      { char: 'üíû', name: 'revolving hearts' },
      { char: 'üíì', name: 'beating heart' },
      { char: 'üíó', name: 'growing heart' },
      { char: 'üíñ', name: 'sparkling heart' },
      { char: 'üíò', name: 'heart with arrow' },
      { char: 'üíù', name: 'heart with ribbon' },
      { char: 'üíü', name: 'heart decoration' }
    ]
  },
  symbols: {
    name: 'Symbols',
    icon: 'üî•',
    emojis: [
      { char: 'üî•', name: 'fire' },
      { char: 'üíØ', name: 'hundred points' },
      { char: '‚≠ê', name: 'star' },
      { char: 'üåü', name: 'glowing star' },
      { char: '‚ú®', name: 'sparkles' },
      { char: 'üí´', name: 'dizzy' },
      { char: '‚ö°', name: 'high voltage' },
      { char: 'üí•', name: 'collision' },
      { char: 'üí¢', name: 'anger symbol' },
      { char: 'üí®', name: 'dashing away' },
      { char: 'üí§', name: 'zzz' },
      { char: 'üí¶', name: 'sweat droplets' },
      { char: 'üíß', name: 'droplet' },
      { char: 'üåä', name: 'water wave' },
      { char: 'üéØ', name: 'direct hit' },
      { char: 'üíØ', name: 'hundred points' },
      { char: 'üî¥', name: 'red circle' },
      { char: 'üü†', name: 'orange circle' },
      { char: 'üü°', name: 'yellow circle' },
      { char: 'üü¢', name: 'green circle' },
      { char: 'üîµ', name: 'blue circle' },
      { char: 'üü£', name: 'purple circle' },
      { char: '‚ö´', name: 'black circle' },
      { char: '‚ö™', name: 'white circle' },
      { char: 'üü§', name: 'brown circle' },
      { char: 'üî∂', name: 'large orange diamond' },
      { char: 'üî∑', name: 'large blue diamond' },
      { char: 'üî∏', name: 'small orange diamond' },
      { char: 'üîπ', name: 'small blue diamond' },
      { char: 'üî∫', name: 'red triangle pointed up' },
      { char: 'üîª', name: 'red triangle pointed down' }
    ]
  },
  objects: {
    name: 'Objects',
    icon: 'üéâ',
    emojis: [
      { char: 'üéâ', name: 'party popper' },
      { char: 'üéä', name: 'confetti ball' },
      { char: 'üéà', name: 'balloon' },
      { char: 'üéÅ', name: 'wrapped gift' },
      { char: 'üèÜ', name: 'trophy' },
      { char: 'ü•á', name: '1st place medal' },
      { char: 'ü•à', name: '2nd place medal' },
      { char: 'ü•â', name: '3rd place medal' },
      { char: 'üèÖ', name: 'sports medal' },
      { char: 'üéñÔ∏è', name: 'military medal' },
      { char: 'üì±', name: 'mobile phone' },
      { char: 'üíª', name: 'laptop' },
      { char: 'üñ•Ô∏è', name: 'desktop computer' },
      { char: '‚åö', name: 'watch' },
      { char: 'üì∑', name: 'camera' },
      { char: 'üìπ', name: 'video camera' },
      { char: 'üéµ', name: 'musical note' },
      { char: 'üé∂', name: 'musical notes' },
      { char: 'üé∏', name: 'guitar' },
      { char: 'üé§', name: 'microphone' },
      { char: 'üéß', name: 'headphone' },
      { char: 'üìö', name: 'books' },
      { char: 'üìñ', name: 'open book' },
      { char: 'üìù', name: 'memo' },
      { char: '‚úèÔ∏è', name: 'pencil' },
      { char: '‚úíÔ∏è', name: 'black nib' },
      { char: 'üñäÔ∏è', name: 'pen' },
      { char: 'üñãÔ∏è', name: 'fountain pen' },
      { char: 'üîç', name: 'magnifying glass tilted left' },
      { char: 'üîé', name: 'magnifying glass tilted right' }
    ]
  }
};

// üéØ Áîü‰∫ßÁ∫ßemojiÊï∞ÊçÆ - Êâ©Â±ïÁâàÊú¨
const PRODUCTION_EMOJI_SETS = {
  smileys: [
    'üòÄ', 'üòÉ', 'üòÑ', 'üòÅ', 'üòÜ', 'üòÖ', 'ü§£', 'üòÇ', 'üôÇ', 'üôÉ', 'üòâ', 'üòä', 'üòá',
    'ü•∞', 'üòç', 'ü§©', 'üòò', 'üòó', 'üòö', 'üòô', 'ü•≤', 'üòã', 'üòõ', 'üòú', 'ü§™', 'üòù',
    'ü§ë', 'ü§ó', 'ü§≠', 'ü§´', 'ü§î', 'ü§ê', 'ü§®', 'üòê', 'üòë', 'üò∂', 'üò∂‚Äçüå´Ô∏è', 'üòè',
    'üòí', 'üôÑ', 'üò¨', 'üòÆ‚Äçüí®', 'ü§•', 'üòå', 'üòî', 'üò™', 'ü§§', 'üò¥', 'üò∑', 'ü§í',
    'ü§ï', 'ü§¢', 'ü§Æ', 'ü§ß', 'ü•µ', 'ü•∂', 'ü•¥', 'üòµ', 'üòµ‚Äçüí´', 'ü§Ø', 'ü§†', 'ü•≥',
    'ü•∏', 'üòé', 'ü§ì', 'üßê'
  ],
  gestures: [
    'üëç', 'üëé', 'üëå', 'ü§å', 'ü§è', '‚úåÔ∏è', 'ü§û', 'ü§ü', 'ü§ò', 'ü§ô', 'üëà', 'üëâ',
    'üëÜ', 'üñï', 'üëá', '‚òùÔ∏è', 'üëã', 'ü§ö', 'üñêÔ∏è', '‚úã', 'üññ', 'üëè', 'üôå', 'üëê',
    'ü§≤', 'ü§ù', 'üôè', 'üí™', 'ü¶µ', 'ü¶∂', 'üëÇ', 'ü¶ª', 'üëÉ', 'üß†', 'ü´Ä', 'ü´Å',
    'ü¶∑', 'ü¶¥', 'üëÄ', 'üëÅÔ∏è', 'üëÖ', 'üëÑ', 'üíã'
  ],
  hearts: [
    '‚ù§Ô∏è', 'üß°', 'üíõ', 'üíö', 'üíô', 'üíú', 'üñ§', 'ü§ç', 'ü§é', 'üíî', '‚ù£Ô∏è', 'üíï',
    'üíû', 'üíì', 'üíó', 'üíñ', 'üíò', 'üíù', 'üíü', 'üíå', 'üí§', 'üí¢', 'üí¨', 'üëÅÔ∏è‚Äçüó®Ô∏è',
    'üó®Ô∏è', 'üóØÔ∏è', 'üí≠', 'üï≥Ô∏è'
  ],
  symbols: [
    'üî•', 'üíØ', '‚≠ê', 'üåü', '‚ú®', 'üí´', '‚ö°', 'üí•', 'üí¢', 'üí®', 'üí§', 'üí¶',
    'üíß', 'üåä', 'üéØ', 'üî¥', 'üü†', 'üü°', 'üü¢', 'üîµ', 'üü£', '‚ö´', '‚ö™', 'üü§',
    'üî∂', 'üî∑', 'üî∏', 'üîπ', 'üî∫', 'üîª', 'üí†', 'üîò', 'üî≥', 'üî≤', 'üèÅ', 'üö©',
    'üéå', 'üè¥', 'üè≥Ô∏è', 'üè≥Ô∏è‚Äçüåà', 'üè≥Ô∏è‚Äç‚ößÔ∏è', 'üè¥‚Äç‚ò†Ô∏è'
  ],
  objects: [
    'üéâ', 'üéä', 'üéà', 'üéÅ', 'üèÜ', 'ü•á', 'ü•à', 'ü•â', 'üèÖ', 'üéñÔ∏è', 'üì±', 'üíª',
    'üñ•Ô∏è', '‚åö', 'üì∑', 'üìπ', 'üéµ', 'üé∂', 'üé∏', 'üé§', 'üéß', 'üìö', 'üìñ', 'üìù',
    '‚úèÔ∏è', '‚úíÔ∏è', 'üñäÔ∏è', 'üñãÔ∏è', 'üîç', 'üîé', 'üîÆ', 'üéÆ', 'üïπÔ∏è', 'üé≤', '‚ô†Ô∏è', '‚ô•Ô∏è',
    '‚ô¶Ô∏è', '‚ô£Ô∏è', '‚ôüÔ∏è', 'üÉè', 'üÄÑ', 'üé¥'
  ],
  activities: [
    '‚öΩ', 'üèÄ', 'üèà', '‚öæ', 'ü•é', 'üéæ', 'üèê', 'üèâ', 'ü•è', 'üé±', 'ü™Ä', 'üèì',
    'üè∏', 'üèí', 'üèë', 'ü•ç', 'üèè', 'ü™É', 'ü•Ö', '‚õ≥', 'ü™Å', 'üèπ', 'üé£', 'ü§ø',
    'ü•ä', 'ü•ã', 'üéΩ', 'üõπ', 'üõº', 'üõ∑', '‚õ∏Ô∏è', 'ü•å', 'üéø', '‚õ∑Ô∏è', 'üèÇ', 'ü™Ç',
    'üèãÔ∏è‚Äç‚ôÄÔ∏è', 'üèãÔ∏è', 'üèãÔ∏è‚Äç‚ôÇÔ∏è', 'ü§º‚Äç‚ôÄÔ∏è', 'ü§º', 'ü§º‚Äç‚ôÇÔ∏è'
  ]
};

// üéØ ÁÆÄÂåñÁöÑcanSendÈÄªËæë - MessageInput‰∏çÁÆ°ÁêÜ‰∏ä‰º†Áä∂ÊÄÅ
const canSend = computed(() => {
  const hasContent = messageContent.value.trim().length > 0;
  const hasUploadedFile = uploadedFileUrl.value !== null;
  const notSending = !isSending.value;

  // üìã ÂèëÈÄÅÊù°‰ª∂Ôºö(ÊúâÂÜÖÂÆπ Êàñ ÊúâÂ∑≤‰∏ä‰º†Êñá‰ª∂URL) ‰∏î Ê≤°ÊúâÊ≠£Âú®ÂèëÈÄÅ
  return (hasContent || hasUploadedFile) && notSending;
});

// üìã MessageInput‰∏çÂÜçÁÆ°ÁêÜ‰∏ä‰º†Áä∂ÊÄÅ - Áî±FilePreviewË¥üË¥£

// Computed
const placeholderText = computed(() => {
  if (formatMode.value === 'markdown') {
    return 'Type in Markdown... **bold**, *italic*, `code`';
  } else if (formatMode.value === 'code') {
    return 'Type code... (supports syntax highlighting)';
  } else if (formatMode.value === 'file') {
    if (selectedFile.value) {
      return uploadedFileUrl.value ? 'File ready to send...' : 'File selected, upload to continue...';
    }
    return 'Select a file to share...';
  }
  return 'Type a message...';
});

const renderedMarkdown = computed(() => {
  if (!messageContent.value.trim()) {
    return '<p class="empty-preview">Start typing to see preview...</p>';
  }
  try {
    return DOMPurify.sanitize(marked(messageContent.value, { breaks: true, gfm: true }));
  } catch (error) {
    return '<p class="error-preview">Markdown syntax error</p>';
  }
});

const filteredEmojis = computed(() => {
  try {
    const query = (emojiSearchQuery.value || '').toString().toLowerCase();
    let emojis = emojiCategories[selectedEmojiCategory.value]?.emojis || [];

    if (query && query.trim()) {
      emojis = Object.values(emojiCategories)
        .flatMap(category => category.emojis || [])
        .filter(emoji => {
          try {
            const emojiName = (emoji?.name || '').toString().toLowerCase();
            return emojiName.indexOf(query) !== -1;
          } catch (error) {
            console.warn('‚ö†Ô∏è Error filtering emoji:', emoji, error);
            return false;
          }
        });
    }

    console.log('üîç Filtered emojis count:', emojis.length, 'for query:', query);
    return emojis;
  } catch (error) {
    console.error('‚ùå Error in filteredEmojis:', error);
    return emojiCategories[selectedEmojiCategory.value]?.emojis || [];
  }
});

// Methods
const getPreviewTitle = () => {
  if (formatMode.value === 'markdown') return 'Markdown Preview';
  if (formatMode.value === 'code') return `Code Preview (${selectedLanguage.value})`;
  if (formatMode.value === 'file') return 'File Preview';
  return 'Preview';
};

const cycleFormatMode = () => {
  if (formatMode.value === 'text') {
    formatMode.value = 'markdown';
    showPreview.value = false;
  } else if (formatMode.value === 'markdown') {
    formatMode.value = 'code';
    showPreview.value = true; // Auto-show preview for code
  } else {
    formatMode.value = 'text';
    showPreview.value = false;
  }
  emit('preview-state-change', showPreview.value);
};

const getFormatModeTooltip = () => {
  if (formatMode.value === 'text') return 'Switch to Markdown mode';
  if (formatMode.value === 'markdown') return 'Switch to Code mode';
  return 'Switch to Text mode';
};

const closePreview = () => {
  showPreview.value = false;
  emit('preview-state-change', false);
};

const toggleMarkdownPreview = () => {
  if (formatMode.value === 'markdown') {
    showPreview.value = !showPreview.value;
    emit('preview-state-change', showPreview.value);
  }
};

// Enhanced Markdown toolbar methods
const insertMarkdown = (before, after = '') => {
  const textarea = messageInput.value;
  if (!textarea) return;

  const start = textarea.selectionStart;
  const end = textarea.selectionEnd;
  const selectedText = messageContent.value.substring(start, end);

  const newText = before + selectedText + after;
  messageContent.value = messageContent.value.substring(0, start) + newText + messageContent.value.substring(end);

  nextTick(() => {
    const newCursorPos = start + before.length + selectedText.length;
    textarea.setSelectionRange(newCursorPos, newCursorPos);
    textarea.focus();
  });
};

const insertCodeBlock = () => {
  const textarea = messageInput.value;
  if (!textarea) return;

  const start = textarea.selectionStart;
  const end = textarea.selectionEnd;
  const selectedText = messageContent.value.substring(start, end);

  const codeBlock = selectedText
    ? `\`\`\`\n${selectedText}\n\`\`\``
    : `\`\`\`\n\n\`\`\``;

  messageContent.value = messageContent.value.substring(0, start) + codeBlock + messageContent.value.substring(end);

  nextTick(() => {
    const newCursorPos = selectedText ? start + codeBlock.length : start + 4; // 4 = "```\n".length
    textarea.setSelectionRange(newCursorPos, newCursorPos);
    textarea.focus();
  });
};

const insertTable = () => {
  const textarea = messageInput.value;
  if (!textarea) return;

  const start = textarea.selectionStart;
  const table = `| Header 1 | Header 2 | Header 3 |
|----------|----------|----------|
| Cell 1   | Cell 2   | Cell 3   |
| Cell 4   | Cell 5   | Cell 6   |

`;

  messageContent.value = messageContent.value.substring(0, start) + table + messageContent.value.substring(start);

  nextTick(() => {
    const newCursorPos = start + table.length;
    textarea.setSelectionRange(newCursorPos, newCursorPos);
    textarea.focus();
  });
};

const clearContent = () => {
  messageContent.value = '';
  selectedFile.value = null;
  uploadedFileUrl.value = null;
  showFilePreview.value = false;
  showPreview.value = false;
  emit('preview-state-change', false);
  nextTick(() => {
    if (messageInput.value) {
      messageInput.value.focus();
      messageInput.value.style.height = 'auto';
    }
  });
};

// File handling - üöÄ ÂÆåÂÖ®ÈáçÊûÑÁöÑÊñá‰ª∂Â§ÑÁêÜÈÄªËæë
const triggerFileUpload = () => {
  console.log('üìÅ [MessageInput] triggerFileUpload called');
  console.log('üìÅ [MessageInput] fileInput.value:', fileInput.value);

  if (fileInput.value) {
    console.log('üìÅ [MessageInput] Clicking file input...');
    fileInput.value.click();
  } else {
    console.error('‚ùå [MessageInput] fileInput ref is null!');
  }
};

// üéØ MessageInputÂè™Ë¥üË¥£Êñá‰ª∂ÈÄâÊã© - ‰∏çÂ§ÑÁêÜ‰∏ä‰º†
const handleFileSelect = (event) => {
  console.log('üîç [DEBUG] handleFileSelect triggered');
  console.log('üîç [DEBUG] event:', event);
  console.log('üîç [DEBUG] event.target.files:', event.target.files);

  const selectedFiles = Array.from(event.target.files);
  console.log('üîç [DEBUG] selectedFiles:', selectedFiles);

  if (selectedFiles.length === 0) {
    console.warn('‚ö†Ô∏è [DEBUG] No files selected');
    return;
  }

  // üîß ÂçïÊñá‰ª∂Ê®°ÂºèÔºöÂè™Â§ÑÁêÜÁ¨¨‰∏Ä‰∏™Êñá‰ª∂
  const newSelectedFile = selectedFiles[0];
  console.log('üîç [DEBUG] newSelectedFile:', newSelectedFile);
  console.log('üîç [DEBUG] File name:', newSelectedFile.name);
  console.log('üîç [DEBUG] File size:', newSelectedFile.size);
  console.log('üîç [DEBUG] File type:', newSelectedFile.type);

  // Áä∂ÊÄÅÊõ¥Êñ∞Ââç
  console.log('üîç [DEBUG] Before state update:');
  console.log('  - selectedFile.value:', selectedFile.value);
  console.log('  - showFilePreview.value:', showFilePreview.value);
  console.log('  - formatMode.value:', formatMode.value);

  // Ê∏ÖÁ©∫‰πãÂâçÁöÑÁä∂ÊÄÅ
  selectedFile.value = newSelectedFile;
  uploadedFileUrl.value = null; // ÈáçÁΩÆ‰∏ä‰º†ÁªìÊûú

  // üéØ ÂàáÊç¢Âà∞Êñá‰ª∂Ê®°ÂºèÂπ∂ÊòæÁ§∫FilePreviewÁªÑ‰ª∂
  formatMode.value = 'file';
  showFilePreview.value = true;
  showPreview.value = true;
  emit('preview-state-change', true);

  // Áä∂ÊÄÅÊõ¥Êñ∞Âêé
  console.log('üîç [DEBUG] After state update:');
  console.log('  - selectedFile.value:', selectedFile.value);
  console.log('  - showFilePreview.value:', showFilePreview.value);
  console.log('  - formatMode.value:', formatMode.value);

  // Ê£ÄÊü•Ê®°ÊùøÊù°‰ª∂
  nextTick(() => {
    console.log('üîç [DEBUG] In nextTick:');
    console.log('  - formatMode === "file":', formatMode.value === 'file');
    console.log('  - selectedFile exists:', !!selectedFile.value);
    console.log('  - Template condition should pass:',
      formatMode.value === 'file' && !!selectedFile.value);

    // Ê£ÄÊü•FilePreviewÂÖÉÁ¥†ÊòØÂê¶Â≠òÂú®
    const filePreviewEl = document.querySelector('[class*="file-preview"]');
    console.log('üîç [DEBUG] FilePreview element found:', !!filePreviewEl);
    if (filePreviewEl) {
      console.log('üîç [DEBUG] FilePreview element:', filePreviewEl);
    }
  });

  if (import.meta.env.DEV) {
    console.log('üìÅ [MessageInput] File passed to FilePreview component');
  }

  // Ê∏ÖÁ©∫input‰ª•ÂÖÅËÆ∏ÈáçÂ§çÈÄâÊã©Âêå‰∏ÄÊñá‰ª∂
  event.target.value = '';
};

// üéØ Â§ÑÁêÜFilePreviewÁªÑ‰ª∂ÁöÑ‰∏ä‰º†ÊàêÂäü‰∫ã‰ª∂
const handleFileUploaded = (uploadResult) => {
  if (import.meta.env.DEV) {
    console.log('‚úÖ [MessageInput] Received upload result from FilePreview:', uploadResult);
  }

  uploadedFileUrl.value = uploadResult.url;

  if (import.meta.env.DEV) {
    console.log('üìã [MessageInput] File URL ready for message sending:', uploadResult.url);
  }
};

// üéØ Â§ÑÁêÜFilePreviewÁªÑ‰ª∂ÁöÑ‰∏ä‰º†ÈîôËØØ‰∫ã‰ª∂
const handleFileUploadError = (error) => {
  if (import.meta.env.DEV) {
    console.error('‚ùå [MessageInput] Upload error from FilePreview:', error);
  }

  // ÂèØ‰ª•ÊòæÁ§∫ÈîôËØØÊèêÁ§∫
  alert(`File upload failed: ${error.message}`);
};

// üéØ Â§ÑÁêÜFilePreviewÁªÑ‰ª∂ÁöÑÊñá‰ª∂ÁßªÈô§‰∫ã‰ª∂
const handleFileRemoved = () => {
  if (import.meta.env.DEV) {
    console.log('üóëÔ∏è [MessageInput] File removed from FilePreview');
  }

  selectedFile.value = null;
  uploadedFileUrl.value = null;
  showFilePreview.value = false;

  // Â¶ÇÊûúÊ≤°ÊúâÂÜÖÂÆπÔºåÂèØ‰ª•ÂàáÊç¢ÂõûtextÊ®°Âºè
  if (!messageContent.value.trim()) {
    formatMode.value = 'text';
    showPreview.value = false;
    emit('preview-state-change', false);
  }
};

// üöÄ MessageInput‰∏çÂÜçÂ§ÑÁêÜ‰∏ä‰º† - Áî±FilePreviewË¥üË¥£

// üîß Á≤òË¥¥Êñá‰ª∂Â§ÑÁêÜ - ‰º†ÈÄíÁªôFilePreview
const handlePaste = (event) => {
  const items = event.clipboardData?.items;
  if (!items) return;

  let pastedFile = null;
  for (const item of items) {
    if (item.type.startsWith('image/')) {
      event.preventDefault();
      const file = item.getAsFile();
      if (file) {
        pastedFile = file; // Âè™ÂèñÁ¨¨‰∏Ä‰∏™ÂõæÁâáÊñá‰ª∂
        break;
      }
    }
  }

  if (pastedFile) {
    if (import.meta.env.DEV) {
      console.log('üìã [MessageInput] File pasted:', pastedFile.name);
    }

    // Ê∏ÖÁ©∫‰πãÂâçÁöÑÁä∂ÊÄÅ
    selectedFile.value = pastedFile;
    uploadedFileUrl.value = null;

    // üéØ ÂàáÊç¢Âà∞Êñá‰ª∂Ê®°ÂºèÂπ∂ÊòæÁ§∫FilePreviewÁªÑ‰ª∂
    formatMode.value = 'file';
    showFilePreview.value = true;
    showPreview.value = true;
    emit('preview-state-change', true);

    if (import.meta.env.DEV) {
      console.log('üìã [MessageInput] Pasted file passed to FilePreview');
    }
  }
};

// üóëÔ∏è MessageInput‰∏çÂÜçÁõ¥Êé•ÁÆ°ÁêÜÊñá‰ª∂ÁßªÈô§ - Áî±FilePreviewÂ§ÑÁêÜ

// üîß MessageInput‰∏çÂÜçÂåÖÂê´Êñá‰ª∂Â∑•ÂÖ∑ÂáΩÊï∞ - ÁßªÂä®Âà∞FilePreview

// üöÄ MessageInput‰∏çÂÜçÂåÖÂê´‰∏ä‰º†ÂáΩÊï∞ - ËÅåË¥£ÂàÜÁ¶ªÂà∞FilePreview

// Emoji handling
const toggleEmojiPicker = () => {
  console.log('üé≠ Toggling emoji picker. Current state:', showEmojiPicker.value);
  showEmojiPicker.value = !showEmojiPicker.value;
  if (showEmojiPicker.value) {
    emojiSearchQuery.value = '';
    selectedEmojiCategory.value = 'smileys';
    console.log('‚úÖ Emoji picker opened');
  } else {
    console.log('‚ùå Emoji picker closed');
  }
};

const closeEmojiPicker = () => {
  console.log('üîí Closing emoji picker');
  showEmojiPicker.value = false;
};

const selectEmojiCategory = (categoryKey) => {
  console.log('üìÇ Selecting emoji category:', categoryKey);
  selectedEmojiCategory.value = categoryKey;
  emojiSearchQuery.value = '';
};

const filterEmojis = () => {
  // Computed property handles filtering
  console.log('üîç Filtering emojis with query:', emojiSearchQuery.value);
};

const insertEmoji = (emoji) => {
  console.log('üòä Inserting emoji:', emoji);
  const textarea = messageInput.value;
  if (!textarea) {
    console.warn('‚ö†Ô∏è Textarea not found');
    return;
  }

  try {
    const start = textarea.selectionStart || 0;
    const end = textarea.selectionEnd || 0;

    messageContent.value = messageContent.value.substring(0, start) + emoji.char + messageContent.value.substring(end);

    nextTick(() => {
      const newPos = start + emoji.char.length;
      textarea.setSelectionRange(newPos, newPos);
      textarea.focus();
    });

    console.log('‚úÖ Emoji inserted successfully');
    showEmojiPicker.value = false;
  } catch (error) {
    console.error('‚ùå Error inserting emoji:', error);
    showEmojiPicker.value = false;
  }
};

// Input handling
const handleKeyDown = (event) => {
  if (event.key === 'Enter' && !event.shiftKey) {
    event.preventDefault();
    sendMessage();
  }

  // Markdown shortcuts
  if ((event.metaKey || event.ctrlKey) && formatMode.value === 'markdown') {
    switch (event.key) {
      case 'b': event.preventDefault(); insertMarkdown('**', '**'); break;
      case 'i': event.preventDefault(); insertMarkdown('*', '*'); break;
      case 'k': event.preventDefault(); insertMarkdown('[', '](url)'); break;
    }
  }
};

const handleInput = () => {
  nextTick(() => {
    if (messageInput.value) {
      messageInput.value.style.height = 'auto';
      messageInput.value.style.height = Math.min(messageInput.value.scrollHeight, 120) + 'px';
    }
  });
};

// Send message
const sendMessage = async () => {
  if (!canSend.value) {
    if (import.meta.env.DEV) {
      console.warn('‚ö†Ô∏è [MessageInput] Cannot send message:', {
        hasContent: messageContent.value.trim().length > 0,
        hasUploadedFileUrl: uploadedFileUrl.value !== null,
        isSending: isSending.value
      });
    }
    return;
  }

  isSending.value = true;

  try {
    const { default: ChatService } = await import('@/services/ChatService.ts');

    // üîó ÊûÑÂª∫Ê∂àÊÅØÊï∞ÊçÆ - ‰ΩøÁî®FilePreviewËøîÂõûÁöÑURL
    const messageData = {
      content: messageContent.value.trim(),
      files: uploadedFileUrl.value ? [uploadedFileUrl.value] : [], // üìã ÂçïÊñá‰ª∂URLÊï∞ÁªÑ
      reply_to: props.replyToMessage?.id,
      mentions: [],
      priority: 'normal',
      is_important: false,
      is_scheduled: false
    };

    if (import.meta.env.DEV) {
      console.log('üì§ [MessageInput] Sending message:', {
        content: messageData.content,
        fileCount: messageData.files.length,
        fileUrls: messageData.files,
        chatId: props.chatId
      });
    }

    // üöÄ ÂèëÈÄÅÊ∂àÊÅØ - ‰∏çÈúÄË¶ÅÂÜç‰∏ä‰º†Êñá‰ª∂ÔºåÁõ¥Êé•ÂèëÈÄÅURLs
    const sentMessage = await ChatService.sendMessage(props.chatId, messageData);

    if (import.meta.env.DEV) {
      console.log('‚úÖ [MessageInput] Message sent successfully:', sentMessage);
    }

    // üéØ Ëß¶ÂèëÁà∂ÁªÑ‰ª∂‰∫ã‰ª∂
    emit('message-sent', sentMessage);

    // üßπ Ê∏ÖÁêÜÁä∂ÊÄÅ
    messageContent.value = '';
    selectedFile.value = null;
    uploadedFileUrl.value = null;
    showFilePreview.value = false;
    closePreview();
    formatMode.value = 'text';

    nextTick(() => {
      if (messageInput.value) {
        messageInput.value.style.height = 'auto';
      }
    });

  } catch (error) {
    console.error('‚ùå [MessageInput] Send message failed:', error);

    // üéØ ÂèëÂ∞ÑÈîôËØØ‰∫ã‰ª∂ÁªôÁà∂ÁªÑ‰ª∂
    emit('error', {
      type: 'send_failed',
      message: error.message,
      error
    });
  } finally {
    isSending.value = false;
  }
};

// Click outside handler
const handleClickOutside = (event) => {
  if (showEmojiPicker.value && emojiPickerRef.value && !emojiPickerRef.value.contains(event.target)) {
    showEmojiPicker.value = false;
  }
};

// Chat isolation
watch(() => props.chatId, (newChatId, oldChatId) => {
  if (newChatId !== oldChatId && oldChatId !== undefined) {
    messageContent.value = '';
    selectedFile.value = null;
    uploadedFileUrl.value = null;
    showFilePreview.value = false;
    showPreview.value = false;
    formatMode.value = 'text';
    showEmojiPicker.value = false;
    emojiSearchQuery.value = '';
    selectedEmojiCategory.value = 'smileys';
    emit('preview-state-change', false);
  }
});

onMounted(() => {
  document.addEventListener('click', handleClickOutside);
});

onUnmounted(() => {
  document.removeEventListener('click', handleClickOutside);
});

// ‚ú® Êñ∞Â¢ûÔºö‰ª£Á†ÅÈ´ò‰∫ÆÈ¢ÑËßàÂäüËÉΩ
const highlightCodePreview = async () => {
  if (!messageContent.value.trim()) {
    highlightedCodePreview.value = ''
    return
  }

  isHighlightingCode.value = true
  codeHighlightError.value = null

  try {
    const highlighted = await highlightCodeAsync(messageContent.value, selectedLanguage.value, {
      theme: 'light',
      lineNumbers: true,
      cache: true,
      showHeader: true,
      showCopy: true
    })

    highlightedCodePreview.value = highlighted

    if (import.meta.env.DEV) {
      console.log(`‚ú® Code preview highlighted: ${selectedLanguage.value}`)
    }
  } catch (error) {
    console.error('üí• Code preview highlighting failed:', error)
    codeHighlightError.value = 'Highlighting failed. Using plain text.'
    highlightedCodePreview.value = ''
  } finally {
    isHighlightingCode.value = false
  }
}

// ‚ú® ÁõëÂê¨ÂÜÖÂÆπÂèòÂåñËá™Âä®È´ò‰∫Æ
watch([messageContent, selectedLanguage], () => {
  if (formatMode.value === 'code' && messageContent.value.trim()) {
    // Èò≤ÊäñÂ§ÑÁêÜÔºåÈÅøÂÖçÈ¢ëÁπÅÈ´ò‰∫Æ
    if (highlightCodePreview.timeoutId) {
      clearTimeout(highlightCodePreview.timeoutId)
    }
    highlightCodePreview.timeoutId = setTimeout(highlightCodePreview, 300)
  }
}, { deep: true })

// ‚ú® ÂàáÊç¢Âà∞‰ª£Á†ÅÊ®°ÂºèÊó∂Ëá™Âä®È´ò‰∫Æ
watch(formatMode, (newMode) => {
  if (newMode === 'code' && messageContent.value.trim()) {
    nextTick(() => {
      highlightCodePreview()
    })
  }
})

// üîß ÊãñÊãΩÊñá‰ª∂Â§ÑÁêÜ - ‰º†ÈÄíÁªôFilePreview
const handleDrop = (event) => {
  event.preventDefault();
  const droppedFiles = Array.from(event.dataTransfer.files);

  if (droppedFiles.length > 0) {
    // Âè™Â§ÑÁêÜÁ¨¨‰∏Ä‰∏™Êñá‰ª∂
    const droppedFile = droppedFiles[0];

    if (import.meta.env.DEV) {
      console.log('üéØ [MessageInput] File dropped:', droppedFile.name);
    }

    // Ê∏ÖÁ©∫‰πãÂâçÁöÑÁä∂ÊÄÅ
    selectedFile.value = droppedFile;
    uploadedFileUrl.value = null;

    // üéØ ÂàáÊç¢Âà∞Êñá‰ª∂Ê®°ÂºèÂπ∂ÊòæÁ§∫FilePreviewÁªÑ‰ª∂
    formatMode.value = 'file';
    showFilePreview.value = true;
    showPreview.value = true;
    emit('preview-state-change', true);

    if (import.meta.env.DEV) {
      console.log('üéØ [MessageInput] Dropped file passed to FilePreview');
    }
  }
};

// üîß ÊãñÊãΩÊÇ¨ÂÅúÂ§ÑÁêÜ
const handleDragOver = (event) => {
  event.preventDefault();
  event.dataTransfer.dropEffect = 'copy';
};

// üîß ÊãñÊãΩËøõÂÖ•Â§ÑÁêÜ
const handleDragEnter = (event) => {
  event.preventDefault();
  // ÂèØ‰ª•Âú®ËøôÈáåÊ∑ªÂä†ËßÜËßâÂèçÈ¶à
};

// Functions moved to avoid duplication
</script>

<style scoped>
.message-input {
  display: flex;
  flex-direction: column;
  gap: 12px;
  padding: 16px;
  background: var(--color-background);
  border-top: 1px solid var(--color-border);
  position: relative;
  /* üîß ÊîØÊåÅÂ≠êÂÖÉÁ¥†ÁªùÂØπÂÆö‰Ωç */
}

/* Main Input Area */
.main-input-area {
  display: flex;
  align-items: flex-end;
  gap: 8px;
}

.input-btn {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 40px;
  height: 40px;
  background: var(--color-background-soft);
  border: 1px solid var(--color-border);
  border-radius: 8px;
  cursor: pointer;
  transition: all 0.15s ease;
  flex-shrink: 0;
  color: var(--color-text-muted);
}

.input-btn:hover {
  background: var(--color-background-muted);
  border-color: var(--color-border-hover);
  color: var(--color-text);
}

.input-btn:active {
  transform: scale(0.95);
}

.input-btn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.input-btn.active {
  background: var(--color-primary-soft);
  border-color: var(--color-primary);
  color: var(--color-primary);
}

/* Mode Button States */
.mode-btn.mode-markdown {
  background: var(--color-primary-soft);
  color: var(--color-primary);
  border-color: var(--color-primary);
}

.mode-btn.mode-code {
  background: var(--color-warning-soft);
  color: var(--color-warning);
  border-color: var(--color-warning);
}

/* Input Container */
.input-container {
  flex: 1;
  display: flex;
  align-items: flex-end;
}

.message-textarea {
  width: 100%;
  min-height: 40px;
  max-height: 120px;
  padding: 10px 12px;
  border: 1px solid var(--color-border);
  border-radius: 8px;
  background: var(--color-background);
  color: var(--color-text);
  font-size: 14px;
  line-height: 1.4;
  resize: none;
  outline: none;
  font-family: inherit;
  transition: border-color 0.15s ease;
}

.message-textarea:focus {
  border-color: var(--color-primary);
  box-shadow: 0 0 0 3px var(--color-primary-alpha);
}

.message-textarea::placeholder {
  color: var(--color-text-muted);
}

/* Loading Spinner */
.loading-spinner {
  width: 16px;
  height: 16px;
  border: 2px solid rgba(255, 255, 255, 0.3);
  border-top: 2px solid white;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}

/* Enhanced Markdown Toolbar */
.markdown-toolbar {
  display: flex;
  align-items: center;
  padding: 8px 12px;
  background: var(--color-background-soft);
  border: 1px solid var(--color-border);
  border-radius: 8px;
  gap: 8px;
}

.toolbar-section {
  display: flex;
  align-items: center;
  gap: 4px;
}

.toolbar-btn {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 32px;
  height: 32px;
  background: var(--color-background);
  border: 1px solid var(--color-border);
  border-radius: 6px;
  cursor: pointer;
  transition: all 0.15s ease;
  color: var(--color-text-muted);
}

.toolbar-btn:hover {
  background: var(--color-background-muted);
  border-color: var(--color-border-hover);
  color: var(--color-text);
}

.toolbar-btn:active {
  transform: translateY(0);
}

.toolbar-btn.active {
  background: var(--color-primary-soft);
  border-color: var(--color-primary);
  color: var(--color-primary);
}

.toolbar-divider {
  width: 1px;
  height: 24px;
  background: var(--color-border);
  margin: 0 4px;
}

/* Preview Container */
.preview-container {
  background: var(--color-background-muted);
  border: 1px solid var(--color-border);
  border-radius: 8px;
  overflow: hidden;
}

.preview-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 8px 12px;
  background: var(--color-background-soft);
  border-bottom: 1px solid var(--color-border);
}

.preview-title {
  display: flex;
  align-items: center;
  gap: 6px;
  font-size: 14px;
  font-weight: 500;
  color: var(--color-text);
}

.preview-close {
  background: none;
  border: none;
  color: var(--color-text-muted);
  font-size: 18px;
  cursor: pointer;
  padding: 4px;
  border-radius: 4px;
  transition: all 0.15s ease;
}

.preview-close:hover {
  background: var(--color-background-soft);
  color: var(--color-text);
}

.preview-content {
  padding: 12px;
  max-height: 300px;
  overflow-y: auto;
}

/* Markdown Preview */
.markdown-preview {
  color: var(--color-text);
  line-height: 1.6;
}

.markdown-preview h1,
.markdown-preview h2,
.markdown-preview h3 {
  margin: 16px 0 8px 0;
  color: var(--color-text);
}

.markdown-preview p {
  margin: 8px 0;
}

.markdown-preview code {
  background: var(--color-background-soft);
  padding: 2px 4px;
  border-radius: 3px;
  font-size: 85%;
}

.markdown-preview pre {
  background: var(--color-background-soft);
  padding: 12px;
  border-radius: 6px;
  overflow-x: auto;
  margin: 12px 0;
}

.markdown-preview table {
  border-collapse: collapse;
  width: 100%;
  margin: 12px 0;
}

.markdown-preview th,
.markdown-preview td {
  border: 1px solid var(--color-border);
  padding: 8px 12px;
  text-align: left;
}

.markdown-preview th {
  background: var(--color-background-soft);
  font-weight: 600;
}

.markdown-preview blockquote {
  border-left: 4px solid var(--color-primary);
  margin: 12px 0;
  padding: 8px 16px;
  background: var(--color-background-soft);
  border-radius: 0 6px 6px 0;
}

.markdown-preview hr {
  border: none;
  border-top: 2px solid var(--color-border);
  margin: 20px 0;
}

.empty-preview {
  color: var(--color-text-muted);
  font-style: italic;
}

.error-preview {
  color: var(--color-error);
}

/* Code Preview */
.code-preview {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.code-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 8px 0;
}

.language-selector {
  padding: 4px 8px;
  border: 1px solid var(--color-border);
  border-radius: 4px;
  background: var(--color-background);
  color: var(--color-text);
  font-size: 12px;
}

.code-info {
  font-size: 12px;
  color: var(--color-text-muted);
}

.code-preview pre {
  margin: 0;
  padding: 12px;
  background: var(--color-background-soft);
  border-radius: 4px;
  overflow-x: auto;
  font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
  font-size: 14px;
  line-height: 1.4;
}

/* File Preview */
.file-preview {
  display: flex;
  flex-direction: column;
  gap: 12px;
}

.file-upload-area {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 32px;
  border: 2px dashed var(--color-border);
  border-radius: 8px;
  text-align: center;
  color: var(--color-text-muted);
}

.file-upload-area svg {
  color: var(--color-text-muted);
  margin-bottom: 12px;
}

.file-upload-area p {
  margin: 0 0 16px 0;
  font-size: 14px;
}

.upload-btn {
  padding: 8px 16px;
  background: var(--color-primary);
  color: white;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  font-size: 14px;
  transition: background-color 0.15s ease;
}

.upload-btn:hover {
  background: var(--color-primary-hover);
}

.file-list {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.file-item {
  display: flex;
  align-items: center;
  gap: 12px;
  padding: 12px;
  background: var(--color-background);
  border: 1px solid var(--color-border);
  border-radius: 6px;
}

.file-icon-wrapper {
  flex-shrink: 0;
  width: 48px;
  height: 48px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.file-thumbnail {
  width: 48px;
  height: 48px;
  object-fit: cover;
  border-radius: 4px;
}

.file-icon {
  width: 48px;
  height: 48px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 4px;
  color: var(--color-text-muted);
}

.file-icon.file-image {
  background: #eff6ff;
  color: #3b82f6;
}

.file-icon.file-video {
  background: #fef3e2;
  color: #f59e0b;
}

.file-icon.file-audio {
  background: #f0fdf4;
  color: #10b981;
}

.file-icon.file-pdf {
  background: #fef2f2;
  color: #ef4444;
}

.file-icon.file-code {
  background: #f8fafc;
  color: #64748b;
}

.file-icon.file-document {
  background: #fafafa;
  color: #6b7280;
}

.file-info {
  flex: 1;
  display: flex;
  flex-direction: column;
  min-width: 0;
}

.file-name {
  font-size: 14px;
  font-weight: 500;
  color: var(--color-text);
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.file-size {
  font-size: 12px;
  color: var(--color-text-muted);
  margin-top: 2px;
}

.file-type {
  font-size: 11px;
  color: var(--color-text-muted);
  margin-top: 2px;
  opacity: 0.7;
}

.file-actions {
  display: flex;
  align-items: center;
  gap: 4px;
}

.file-remove {
  background: none;
  border: none;
  color: var(--color-text-muted);
  cursor: pointer;
  padding: 6px;
  border-radius: 4px;
  transition: all 0.15s ease;
}

.file-remove:hover {
  background: var(--color-error-soft);
  color: var(--color-error);
}

.add-more-btn {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 6px;
  padding: 8px 12px;
  background: var(--color-background-soft);
  border: 1px dashed var(--color-border);
  border-radius: 6px;
  color: var(--color-text-muted);
  cursor: pointer;
  font-size: 14px;
  transition: all 0.15s ease;
}

.add-more-btn:hover {
  background: var(--color-background-muted);
  border-color: var(--color-border-hover);
  color: var(--color-text);
}

/* üñºÔ∏è Enhanced Single File Preview Styles */
.single-file-display {
  display: flex;
  flex-direction: column;
  gap: 20px;
  padding: 20px;
}

.selected-file {
  display: flex;
  flex-direction: column;
  gap: 15px;
  background: var(--color-background-soft);
  border-radius: 12px;
  padding: 20px;
  border: 2px dashed var(--color-border);
  transition: all 0.3s ease;
}

.selected-file:hover {
  border-color: var(--color-primary);
}

.file-preview-container {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 120px;
  background: var(--color-background);
  border-radius: 8px;
  border: 1px solid var(--color-border);
  position: relative;
  overflow: hidden;
}

.file-thumbnail-large {
  max-width: 200px;
  max-height: 150px;
  object-fit: cover;
  border-radius: 6px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  transition: transform 0.3s ease;
}

.file-thumbnail-large:hover {
  transform: scale(1.05);
}

.file-icon-large {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 8px;
  color: var(--color-text-muted);
  padding: 20px;
}

.file-extension {
  font-size: 12px;
  font-weight: bold;
  background: var(--color-primary-soft);
  color: var(--color-primary);
  padding: 4px 8px;
  border-radius: 4px;
  text-transform: uppercase;
}

.file-info-detailed {
  text-align: center;
}

.file-info-detailed .file-name {
  margin: 0 0 8px 0;
  font-size: 16px;
  font-weight: 600;
  color: var(--color-text);
  word-break: break-word;
}

.file-meta {
  display: flex;
  justify-content: center;
  gap: 16px;
  margin-bottom: 8px;
  font-size: 14px;
  color: var(--color-text-muted);
}

.file-status {
  display: flex;
  justify-content: center;
}

.status-badge {
  display: inline-flex;
  align-items: center;
  gap: 6px;
  padding: 6px 12px;
  border-radius: 20px;
  font-size: 12px;
  font-weight: 500;
}

.status-local {
  background: var(--color-warning-soft);
  color: var(--color-warning);
}

.file-actions-panel {
  display: flex;
  justify-content: center;
  gap: 12px;
  flex-wrap: wrap;
}

.upload-remote-btn {
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 12px 20px;
  background: var(--color-primary);
  color: white;
  border: none;
  border-radius: 8px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.upload-remote-btn:hover:not(:disabled) {
  background: var(--color-primary-dark);
  transform: translateY(-1px);
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
}

.upload-remote-btn:disabled {
  background: var(--color-text-muted);
  cursor: not-allowed;
  transform: none;
  box-shadow: none;
}

.replace-file-btn,
.remove-file-btn {
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 8px 16px;
  background: var(--color-background);
  color: var(--color-text);
  border: 1px solid var(--color-border);
  border-radius: 6px;
  cursor: pointer;
  transition: all 0.2s ease;
  font-size: 14px;
}

.replace-file-btn:hover {
  background: var(--color-background-muted);
  border-color: var(--color-primary);
  color: var(--color-primary);
  transform: translateY(-1px);
}

.remove-file-btn:hover {
  background: var(--color-danger-soft);
  border-color: var(--color-danger);
  color: var(--color-danger);
  transform: translateY(-1px);
}

.loading-spinner-small {
  width: 14px;
  height: 14px;
  border: 2px solid rgba(255, 255, 255, 0.3);
  border-top: 2px solid white;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

.uploaded-file-display {
  background: var(--color-success-soft);
  border-radius: 8px;
  padding: 16px;
  border-left: 4px solid var(--color-success);
  animation: slideInUp 0.4s ease;
}

@keyframes slideInUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }

  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.upload-success-indicator {
  display: flex;
  align-items: center;
  gap: 8px;
  margin-bottom: 12px;
  color: var(--color-success);
  font-weight: 500;
}

.uploaded-file-info {
  background: var(--color-background);
  border-radius: 6px;
  padding: 12px;
}

.remote-url {
  display: flex;
  flex-direction: column;
  gap: 6px;
}

.remote-url label {
  font-size: 12px;
  font-weight: 500;
  color: var(--color-text-muted);
}

.url-link {
  color: var(--color-primary);
  text-decoration: none;
  word-break: break-all;
  font-family: monospace;
  font-size: 13px;
  padding: 6px 8px;
  background: var(--color-background-soft);
  border-radius: 4px;
  border: 1px solid var(--color-border);
  transition: all 0.2s ease;
}

.url-link:hover {
  background: var(--color-primary-soft);
  border-color: var(--color-primary);
  text-decoration: underline;
}

/* Enhanced Send Button with Dynamic States */
.send-btn {
  background: var(--color-background-soft);
  color: var(--color-text-muted);
  border-color: var(--color-border);
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  position: relative;
  overflow: hidden;
}

/* Empty state - unattractive and subdued */
.send-btn.empty {
  background: var(--color-background);
  border: 2px dashed var(--color-border);
  color: var(--color-text-muted);
  opacity: 0.4;
  transform: scale(0.9);
  cursor: not-allowed;
}

.send-btn.empty:hover {
  background: var(--color-background);
  border-color: var(--color-border);
  color: var(--color-text-muted);
  transform: scale(0.9);
}

/* Filled state - attractive and inviting */
.send-btn.filled {
  background: linear-gradient(135deg, var(--color-primary), var(--color-primary-hover));
  color: white;
  border-color: var(--color-primary);
  box-shadow: 0 4px 12px rgba(88, 101, 242, 0.3);
  transform: scale(1);
}

.send-btn.filled:hover:not(:disabled) {
  background: linear-gradient(135deg, var(--color-primary-hover), var(--color-primary));
  box-shadow: 0 6px 20px rgba(88, 101, 242, 0.4);
  transform: scale(1.05);
}

/* Pulse effect for longer messages */
.send-btn.pulse {
  animation: sendPulse 2s infinite;
}

@keyframes sendPulse {

  0%,
  100% {
    box-shadow: 0 4px 12px rgba(88, 101, 242, 0.3);
    transform: scale(1);
  }

  50% {
    box-shadow: 0 6px 24px rgba(88, 101, 242, 0.6);
    transform: scale(1.02);
  }
}

.send-btn.active {
  background: linear-gradient(135deg, var(--color-primary), var(--color-primary-hover));
  color: white;
  border-color: var(--color-primary);
}

.send-btn svg {
  transition: transform 0.2s ease;
}

.send-btn.filled:hover:not(:disabled) svg {
  transform: rotate(15deg) scale(1.1);
}

/* Text buttons for H1, H2, H3 */
.text-btn {
  font-size: 11px;
  font-weight: 600;
  color: inherit;
  letter-spacing: 0.5px;
}

/* Responsive Design */
@media (max-width: 768px) {
  .message-input {
    padding: 12px;
    gap: 8px;
  }

  .markdown-toolbar {
    gap: 6px;
    padding: 6px 8px;
    flex-wrap: wrap;
  }

  .toolbar-btn {
    width: 28px;
    height: 28px;
  }

  .text-btn {
    font-size: 10px;
  }

  .input-btn {
    width: 36px;
    height: 36px;
  }

  .emoji-modal {
    width: 90vw;
    max-width: 350px;
    max-height: 80vh;
  }

  .emoji-grid {
    grid-template-columns: repeat(6, 1fr);
  }

  .emoji-item {
    font-size: 20px;
    padding: 6px;
  }

  .file-item {
    padding: 8px;
  }

  .file-icon-wrapper {
    width: 40px;
    height: 40px;
  }

  .file-thumbnail {
    width: 40px;
    height: 40px;
  }

  .file-icon {
    width: 40px;
    height: 40px;
  }

  .preview-content {
    max-height: 200px;
  }
}

/* Dark mode adjustments */
@media (prefers-color-scheme: dark) {
  .file-icon.file-image {
    background: #1e3a8a;
    color: #60a5fa;
  }

  .file-icon.file-video {
    background: #92400e;
    color: #fbbf24;
  }

  .file-icon.file-audio {
    background: #064e3b;
    color: #34d399;
  }

  .file-icon.file-pdf {
    background: #7f1d1d;
    color: #f87171;
  }

  .file-icon.file-code {
    background: #1e293b;
    color: #94a3b8;
  }

  .file-icon.file-document {
    background: #1f2937;
    color: #9ca3af;
  }
}

/* Enhanced focus and accessibility */
.toolbar-btn:focus,
.input-btn:focus {
  outline: 2px solid var(--color-primary);
  outline-offset: 2px;
}

.message-textarea:focus {
  border-color: var(--color-primary);
  box-shadow: 0 0 0 3px var(--color-primary-alpha);
}

/* Animation for toolbar appearance */
.markdown-toolbar {
  animation: slideDown 0.2s ease-out;
}

@keyframes slideDown {
  from {
    opacity: 0;
    transform: translateY(-10px);
  }

  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Preview container animation */
.preview-container {
  animation: fadeIn 0.2s ease-out;
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }

  to {
    opacity: 1;
  }
}

/* üöÄ MessageInput Container - ÊîØÊåÅÁªùÂØπÂÆö‰Ωç */
.message-input {
  position: relative !important;
  /* üîß ÊîØÊåÅÂ≠êÂÖÉÁ¥†ÁªùÂØπÂÆö‰Ωç */
}

/* Production Emoji Modal - üöÄ FIXED: ÊòæÁ§∫Âú®ËæìÂÖ•Ê°Ü‰∏äÊñπ */
.emoji-modal-overlay {
  position: absolute !important;
  bottom: 100% !important;
  left: 0 !important;
  right: 0 !important;
  background: transparent !important;
  display: flex !important;
  align-items: flex-end !important;
  justify-content: flex-end !important;
  z-index: 1000 !important;
  pointer-events: auto !important;
  visibility: visible !important;
  opacity: 1 !important;
  margin-bottom: 8px;
  padding-right: 80px;
  /* ÈÅøÂÖç‰∏éÂèëÈÄÅÊåâÈíÆÈáçÂè† */
}

.emoji-modal {
  background: var(--color-background);
  border: 1px solid var(--color-border);
  border-radius: 12px;
  box-shadow: 0 20px 50px rgba(0, 0, 0, 0.3);
  width: 400px;
  max-height: 450px;
  display: flex;
  flex-direction: column;
  overflow: hidden;
  z-index: 1001 !important;
  position: relative !important;
  /* üéØ ‰ºòÈõÖÁöÑÂêë‰∏äÂä®Áîª */
  animation: slideUp 0.3s cubic-bezier(0.16, 1, 0.3, 1);
  transform-origin: bottom right;
}

.emoji-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 16px 20px;
  border-bottom: 1px solid var(--color-border);
  background: var(--color-background-soft);
}

.emoji-header h3 {
  margin: 0;
  font-size: 16px;
  font-weight: 600;
  color: var(--color-text);
}

.emoji-close {
  background: none;
  border: none;
  color: var(--color-text-muted);
  font-size: 20px;
  cursor: pointer;
  padding: 4px 8px;
  border-radius: 6px;
  transition: all 0.15s ease;
}

.emoji-close:hover {
  background: var(--color-background-muted);
  color: var(--color-text);
}

.emoji-search {
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 12px 16px;
  border-bottom: 1px solid var(--color-border);
}

.emoji-search svg {
  color: var(--color-text-muted);
  flex-shrink: 0;
}

.emoji-search input {
  flex: 1;
  border: none;
  outline: none;
  background: transparent;
  color: var(--color-text);
  font-size: 14px;
}

.emoji-search input::placeholder {
  color: var(--color-text-muted);
}

.emoji-categories {
  display: flex;
  gap: 4px;
  padding: 12px 16px;
  border-bottom: 1px solid var(--color-border);
  background: var(--color-background-soft);
  overflow-x: auto;
}

.category-btn {
  background: none;
  border: none;
  cursor: pointer;
  padding: 8px 12px;
  border-radius: 6px;
  font-size: 18px;
  transition: all 0.15s ease;
  white-space: nowrap;
  color: var(--color-text-muted);
}

.category-btn:hover {
  background: var(--color-background-muted);
}

.category-btn.active {
  background: var(--color-primary-soft);
  color: var(--color-primary);
}

.emoji-content {
  flex: 1;
  overflow-y: auto;
  padding: 16px;
}

.emoji-grid {
  display: grid;
  grid-template-columns: repeat(8, 1fr);
  gap: 4px;
}

.emoji-item {
  background: none;
  border: none;
  font-size: 24px;
  padding: 8px;
  border-radius: 6px;
  cursor: pointer;
  transition: all 0.15s ease;
  aspect-ratio: 1;
  display: flex;
  align-items: center;
  justify-content: center;
}

.emoji-item:hover {
  background: var(--color-background-soft);
  transform: scale(1.1);
}

.emoji-item:active {
  transform: scale(0.95);
}

.no-emojis {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 40px 20px;
  color: var(--color-text-muted);
  text-align: center;
}

.no-emojis svg {
  margin-bottom: 12px;
  opacity: 0.5;
}

.no-emojis p {
  margin: 0;
  font-size: 14px;
}

.code-content-wrapper {
  position: relative;
}

.code-loading,
.code-error {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  background: rgba(255, 255, 255, 0.9);
  border-radius: 4px;
  padding: 4px 8px;
  font-size: 12px;
  color: var(--color-text);
}

.code-loading {
  border: 1px solid var(--color-primary);
}

.code-error {
  border: 1px solid var(--color-error);
}

.error-icon {
  margin-right: 4px;
}

.retry-btn {
  background: none;
  border: none;
  color: var(--color-text);
  cursor: pointer;
  font-size: 12px;
  margin-left: 4px;
}

.retry-btn:hover {
  text-decoration: underline;
}

.highlighted-code-preview {
  white-space: pre-wrap;
  word-break: break-word;
}

.code-placeholder {
  color: var(--color-text-muted);
}

/* Code Preview Enhancements - ÊµÖËâ≤Ë∞É‰∏ªÈ¢ò */
.code-preview {
  border: 1px solid #e1e8ed;
  border-radius: 8px;
  overflow: hidden;
  background-color: #f8f9fa;
  margin-bottom: 1rem;
}

.code-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0.75rem 1rem;
  background-color: #f1f3f4;
  border-bottom: 1px solid #e1e8ed;
}

.language-selector {
  background-color: #ffffff;
  border: 1px solid #d1d9e0;
  border-radius: 4px;
  color: #24292f;
  padding: 0.25rem 0.5rem;
  font-size: 0.875rem;
  min-width: 120px;
}

.language-selector:focus {
  outline: none;
  border-color: #0969da;
  box-shadow: 0 0 0 1px #0969da;
}

.code-info {
  font-size: 0.875rem;
  color: #656d76;
  font-family: 'Consolas', 'Monaco', monospace;
}

.code-content-wrapper {
  position: relative;
  min-height: 200px;
  max-height: 400px;
  overflow-y: auto;
}

/* ÊµÖËâ≤Ë∞ÉÈ´ò‰∫Æ‰ª£Á†ÅÊ†∑Âºè */
.highlighted-code-preview {
  font-family: 'JetBrains Mono', 'Fira Code', 'Consolas', 'Monaco', monospace;
  font-size: 0.875rem;
  line-height: 1.5;
}

.highlighted-code-preview :deep(.code-block-wrapper) {
  margin: 0;
  border-radius: 0;
  box-shadow: none;
  background-color: transparent;
}

.highlighted-code-preview :deep(.hljs) {
  margin: 0;
  padding: 1rem;
  background-color: #f8f9fa !important;
  color: #24292f !important;
  overflow-x: auto;
}

.highlighted-code-preview :deep(.line-number) {
  color: #656d76;
  margin-right: 1rem;
  user-select: none;
}

.highlighted-code-preview :deep(.line-content) {
  padding-left: 0.5rem;
}

.highlighted-code-preview :deep(.line-content.highlighted) {
  background-color: rgba(255, 235, 59, 0.3);
  border-left: 3px solid #ffc107;
  padding-left: calc(0.5rem - 3px);
}

/* ÊµÖËâ≤Ë∞ÉÂä†ËΩΩÁä∂ÊÄÅ */
.code-loading {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 2rem;
  gap: 0.75rem;
  color: #0969da;
  font-size: 0.875rem;
}

.code-loading .loading-spinner {
  width: 16px;
  height: 16px;
  border: 2px solid rgba(9, 105, 218, 0.2);
  border-top: 2px solid #0969da;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

/* ÊµÖËâ≤Ë∞ÉÈîôËØØÁä∂ÊÄÅ */
.code-error {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 2rem;
  gap: 0.75rem;
  color: #d1242f;
  font-size: 0.875rem;
  background-color: rgba(209, 36, 47, 0.1);
  margin: 1rem;
  border-radius: 4px;
  border: 1px solid rgba(209, 36, 47, 0.3);
}

.retry-btn {
  background-color: #0969da;
  color: white;
  border: none;
  border-radius: 4px;
  padding: 0.25rem 0.75rem;
  font-size: 0.75rem;
  cursor: pointer;
  transition: background-color 0.2s;
}

.retry-btn:hover {
  background-color: #0860ca;
}

/* ÊµÖËâ≤Ë∞ÉÂç†‰ΩçÁ¨¶Ê†∑Âºè */
.code-placeholder {
  margin: 0;
  padding: 1rem;
  background-color: #f8f9fa;
  color: #656d76;
  font-family: 'Consolas', 'Monaco', monospace;
  font-size: 0.875rem;
  line-height: 1.5;
  border: none;
  overflow-x: auto;
}

.code-placeholder code {
  color: inherit;
  background: none;
  padding: 0;
  font-family: inherit;
  font-size: inherit;
}

/* ÊµÖËâ≤Ë∞ÉÊªöÂä®Êù°Ê†∑Âºè */
.code-content-wrapper::-webkit-scrollbar,
.highlighted-code-preview :deep(.hljs)::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}

.code-content-wrapper::-webkit-scrollbar-track,
.highlighted-code-preview :deep(.hljs)::-webkit-scrollbar-track {
  background: #f1f3f4;
}

.code-content-wrapper::-webkit-scrollbar-thumb,
.highlighted-code-preview :deep(.hljs)::-webkit-scrollbar-thumb {
  background: #c9d1d9;
  border-radius: 4px;
}

.code-content-wrapper::-webkit-scrollbar-thumb:hover,
.highlighted-code-preview :deep(.hljs)::-webkit-scrollbar-thumb:hover {
  background: #959da5;
}

@keyframes spin {
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
}

/* üéØ Emoji Modal Âêë‰∏äÊªëÂä®Âä®Áîª */
@keyframes slideUp {
  from {
    opacity: 0;
    transform: translateY(20px) scale(0.9);
  }

  to {
    opacity: 1;
    transform: translateY(0) scale(1);
  }
}

/* üéØ Áîü‰∫ßÁ∫ßË°®ÊÉÖÂú®Ê∂àÊÅØ‰∏≠ÁöÑ1.5xÊòæÁ§∫ */
.message-content-wrapper :deep(.emoji-in-message) {
  font-size: 1.5em !important;
  line-height: 1.2 !important;
  vertical-align: middle !important;
  display: inline-block !important;
  margin: 0 0.1em !important;
}

/* üéØ Ë°®ÊÉÖÁ¨¶Âè∑ÈÄöÁî®Ê†∑Âºè - ÈÄÇÁî®‰∫éÊâÄÊúâÊ∂àÊÅØÂÜÖÂÆπ */
.message-content-wrapper :deep(span[data-emoji]),
.message-content-wrapper :deep(.emoji),
.message-content-wrapper :deep([class*="emoji"]) {
  font-size: 1.5em !important;
  line-height: 1.2 !important;
  vertical-align: middle !important;
  display: inline-block !important;
  margin: 0 0.1em !important;
}

/* üéØ UnicodeË°®ÊÉÖÁ¨¶Âè∑Ëá™Âä®Ê£ÄÊµãÂíåÊîæÂ§ß */
.message-content-wrapper :deep(*) {
  /* ÂåπÈÖçÂ∏∏ËßÅUnicodeË°®ÊÉÖÁ¨¶Âè∑ */
  background-image: none;
}

.message-content-wrapper :deep(*:contains("üòÄ")),
.message-content-wrapper :deep(*:contains("üòÉ")),
.message-content-wrapper :deep(*:contains("üòÑ")),
.message-content-wrapper :deep(*:contains("‚ù§Ô∏è")),
.message-content-wrapper :deep(*:contains("üëç")),
.message-content-wrapper :deep(*:contains("üî•")),
.message-content-wrapper :deep(*:contains("üíØ")),
.message-content-wrapper :deep(*:contains("üéâ")) {
  font-size: 1.5em !important;
}

/* üéØ Êõ¥ÂπøÊ≥õÁöÑË°®ÊÉÖÁ¨¶Âè∑ÂåπÈÖç - ‰ΩøÁî®font-feature-settings */
.message-content-wrapper {
  font-feature-settings: "liga" 1, "calt" 1;
  font-variant-emoji: emoji;
}

.message-content-wrapper :deep(*) {
  font-variant-emoji: emoji;
}

/* üéØ Êõ¥Á≤æÁ°ÆÁöÑË°®ÊÉÖÁ¨¶Âè∑Ê£ÄÊµãÂíåÊ†∑Âºè */
.message-content-wrapper :deep(span[data-emoji]),
.message-content-wrapper :deep(.emoji),
.message-content-wrapper :deep([class*="emoji"]) {
  font-size: 1.5em !important;
  line-height: 1.2 !important;
  vertical-align: middle !important;
  display: inline-block !important;
  margin: 0 0.1em !important;
}

/* File Preview Container - Enhanced with Upload Status */
.preview-container {
  background: var(--color-background-muted);
  border: 1px solid var(--color-border);
  border-radius: 8px;
  overflow: hidden;
}

.preview-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 8px 12px;
  background: var(--color-background-soft);
  border-bottom: 1px solid var(--color-border);
}

.preview-title {
  display: flex;
  align-items: center;
  gap: 6px;
  font-size: 14px;
  font-weight: 500;
  color: var(--color-text);
}

.preview-close {
  background: none;
  border: none;
  color: var(--color-text-muted);
  font-size: 18px;
  cursor: pointer;
  padding: 4px;
  border-radius: 4px;
  transition: all 0.15s ease;
}

.preview-close:hover {
  background: var(--color-background-soft);
  color: var(--color-text);
}

.preview-content {
  padding: 12px;
  max-height: 300px;
  overflow-y: auto;
}

/* üîÑ Ê≠£Âú®‰∏ä‰º†ÁöÑÊñá‰ª∂ */
.uploading-files {
  margin-bottom: 16px;
}

.uploading-files h5 {
  margin-bottom: 8px;
  font-size: 14px;
  color: var(--color-text);
}

.file-item.uploading {
  display: flex;
  align-items: center;
  gap: 12px;
  padding: 8px;
  background: var(--color-background-soft);
  border: 1px dashed var(--color-border);
  border-radius: 6px;
}

.file-icon {
  width: 24px;
  height: 24px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 4px;
  color: var(--color-text-muted);
}

.file-icon.file-image {
  background: #eff6ff;
  color: #3b82f6;
}

.file-icon.file-video {
  background: #fef3e2;
  color: #f59e0b;
}

.file-icon.file-audio {
  background: #f0fdf4;
  color: #10b981;
}

.file-icon.file-pdf {
  background: #fef2f2;
  color: #ef4444;
}

.file-icon.file-code {
  background: #f8fafc;
  color: #64748b;
}

.file-icon.file-document {
  background: #fafafa;
  color: #6b7280;
}

.file-info {
  flex: 1;
  display: flex;
  flex-direction: column;
  min-width: 0;
}

.file-name {
  font-size: 14px;
  font-weight: 500;
  color: var(--color-text);
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.file-size {
  font-size: 12px;
  color: var(--color-text-muted);
  margin-top: 2px;
}

.file-upload-progress {
  display: flex;
  align-items: center;
  gap: 4px;
}

.progress-bar {
  width: 100%;
  height: 8px;
  background: var(--color-border);
  border-radius: 4px;
}

.progress-fill {
  height: 100%;
  background: var(--color-primary);
  border-radius: 4px;
}

.progress-text {
  font-size: 12px;
  color: var(--color-text-muted);
}

/* ‰∏ä‰º†Áä∂ÊÄÅ */
.upload-status-badge {
  display: flex;
  align-items: center;
  gap: 4px;
}

.status-uploading,
.status-failed {
  font-size: 12px;
  color: var(--color-text-muted);
}

.status-uploading {
  color: var(--color-success);
}

.status-failed {
  color: var(--color-error);
}

/* ‚úÖ Â∑≤‰∏ä‰º†ÁöÑÊñá‰ª∂ */
.uploaded-files {
  margin-bottom: 16px;
}

.uploaded-files h5 {
  margin-bottom: 8px;
  font-size: 14px;
  color: var(--color-text);
}

.file-item.uploaded {
  display: flex;
  align-items: center;
  gap: 12px;
  padding: 12px;
  background: var(--color-background);
  border: 1px solid var(--color-border);
  border-radius: 6px;
}

.file-preview-image {
  position: relative;
}

.file-overlay {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  border-radius: 4px;
  display: flex;
  flex-direction: column;
  justify-content: flex-end;
  padding: 8px;
}

.file-name,
.file-size {
  color: white;
  font-size: 12px;
  margin-bottom: 4px;
}

.file-actions {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.file-action {
  background: none;
  border: none;
  color: white;
  cursor: pointer;
  padding: 4px;
  border-radius: 4px;
  transition: background-color 0.15s ease;
}

.file-action:hover {
  background: rgba(255, 255, 255, 0.2);
}

.file-item-content {
  display: flex;
  flex-direction: column;
  gap: 4px;
}

.file-url {
  display: flex;
  align-items: center;
  gap: 4px;
}

.url-label {
  font-size: 12px;
  color: var(--color-text-muted);
}

.file-url-link {
  color: white;
  text-decoration: none;
}

/* üìÅ Ê∑ªÂä†Êõ¥Â§öÊñá‰ª∂ */
.add-more-files {
  display: flex;
  justify-content: center;
  padding: 12px;
  background: var(--color-background-soft);
  border: 1px dashed var(--color-border);
  border-radius: 6px;
}

.add-files-btn {
  background: var(--color-primary);
  color: white;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  font-size: 14px;
  transition: background-color 0.15s ease;
}

.add-files-btn:hover {
  background: var(--color-primary-hover);
}

/* üöÄ Enhanced File Upload Status Styles */

/* Upload Status Indicator */
.upload-status {
  display: flex;
  align-items: center;
  gap: 10px;
  margin-right: 15px;
}

.upload-text {
  font-size: 12px;
  color: var(--color-text-muted);
  white-space: nowrap;
}

.upload-progress-bar {
  width: 100px;
  height: 4px;
  background: var(--color-background-soft);
  border-radius: 2px;
  overflow: hidden;
}

.upload-progress-fill {
  height: 100%;
  background: linear-gradient(90deg, #5865f2 0%, #7c3aed 100%);
  border-radius: 2px;
  transition: width 0.3s ease;
}

/* File Upload States */
.uploading-files {
  margin-bottom: 20px;
  padding-bottom: 20px;
  border-bottom: 1px solid var(--color-border);
}

.uploading-files h5,
.uploaded-files h5 {
  margin: 0 0 15px 0;
  font-size: 14px;
  font-weight: 600;
  color: var(--color-text);
  display: flex;
  align-items: center;
  gap: 8px;
}

.file-item {
  display: flex;
  align-items: center;
  gap: 12px;
  padding: 12px;
  background: var(--color-background-soft);
  border-radius: 8px;
  margin-bottom: 10px;
  transition: all 0.3s ease;
}

.file-item.uploading {
  border-left: 4px solid #ffc107;
  animation: uploadPulse 2s ease-in-out infinite;
}

.file-item.uploaded {
  border-left: 4px solid #28a745;
}

@keyframes uploadPulse {

  0%,
  100% {
    opacity: 1;
  }

  50% {
    opacity: 0.7;
  }
}

/* File Upload Progress */
.file-upload-progress {
  margin-top: 8px;
  display: flex;
  align-items: center;
  gap: 10px;
}

.progress-bar {
  flex: 1;
  height: 6px;
  background: var(--color-background-muted);
  border-radius: 3px;
  overflow: hidden;
}

.progress-fill {
  height: 100%;
  background: linear-gradient(90deg, #17a2b8 0%, #20c997 100%);
  border-radius: 3px;
  transition: width 0.3s ease;
}

.progress-text {
  font-size: 12px;
  color: var(--color-text-muted);
  min-width: 35px;
  text-align: right;
}

/* Upload Status Badges */
.upload-status-badge {
  margin-top: 4px;
}

.status-uploading {
  color: #17a2b8;
  font-size: 12px;
  font-weight: 500;
}

.status-failed {
  color: #dc3545;
  font-size: 12px;
  font-weight: 500;
}

/* Enhanced File Preview */
.file-preview-image {
  position: relative;
  width: 120px;
  height: 120px;
  border-radius: 8px;
  overflow: hidden;
  margin-bottom: 10px;
}

.file-preview-image img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.file-overlay {
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  background: linear-gradient(180deg, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 0.8) 100%);
  color: white;
  padding: 8px;
  font-size: 12px;
}

.file-overlay .file-name {
  display: block;
  font-weight: 500;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  margin-bottom: 2px;
}

.file-overlay .file-size {
  display: block;
  opacity: 0.8;
  font-size: 11px;
}

/* File Actions */
.file-actions {
  display: flex;
  gap: 8px;
  margin-top: 8px;
}

.file-action {
  padding: 4px 8px;
  font-size: 12px;
  border-radius: 4px;
  text-decoration: none;
  font-weight: 500;
  transition: all 0.2s ease;
  border: none;
  cursor: pointer;
}

.file-action.view {
  background: var(--color-primary-soft);
  color: var(--color-primary);
}

.file-action.view:hover {
  background: var(--color-primary);
  color: white;
}

.file-action.remove {
  background: var(--color-danger-soft);
  color: var(--color-danger);
}

.file-action.remove:hover {
  background: var(--color-danger);
  color: white;
}

/* File Item Content Layout */
.file-item-content {
  display: flex;
  align-items: center;
  gap: 12px;
  width: 100%;
}

.file-info {
  flex: 1;
  min-width: 0;
}

.file-name {
  display: block;
  font-weight: 500;
  color: var(--color-text);
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  margin-bottom: 4px;
}

.file-size {
  display: block;
  font-size: 12px;
  color: var(--color-text-muted);
  margin-bottom: 4px;
}

/* File URL Display */
.file-url {
  margin-top: 6px;
  padding: 6px 8px;
  background: var(--color-background-muted);
  border-radius: 4px;
  border: 1px solid var(--color-border);
}

.url-label {
  font-size: 11px;
  color: var(--color-text-muted);
  margin-right: 6px;
}

.file-url-link {
  font-size: 12px;
  color: var(--color-primary);
  text-decoration: none;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  display: inline-block;
  max-width: 200px;
  vertical-align: top;
}

.file-url-link:hover {
  text-decoration: underline;
}

/* Add More Files Button */
.add-more-files {
  margin-top: 15px;
  padding-top: 15px;
  border-top: 1px solid var(--color-border);
  text-align: center;
}

.add-files-btn {
  background: var(--color-background-soft);
  border: 2px dashed var(--color-border);
  border-radius: 8px;
  padding: 12px 20px;
  color: var(--color-text-muted);
  font-size: 14px;
  cursor: pointer;
  transition: all 0.3s ease;
  min-width: 150px;
}

.add-files-btn:hover {
  border-color: var(--color-primary);
  color: var(--color-primary);
  background: var(--color-primary-soft);
}

/* Enhanced Send Button States */
.send-btn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
  background: var(--color-background-muted);
  color: var(--color-text-muted);
}

.send-btn.active {
  background: linear-gradient(135deg, #5865f2 0%, #7c3aed 100%);
  color: white;
  box-shadow: 0 2px 8px rgba(88, 101, 242, 0.3);
}

.send-btn.pulse {
  animation: sendPulse 2s ease-in-out infinite;
}

@keyframes sendPulse {

  0%,
  100% {
    box-shadow: 0 2px 8px rgba(88, 101, 242, 0.3);
  }

  50% {
    box-shadow: 0 4px 16px rgba(88, 101, 242, 0.5);
    transform: translateY(-1px);
  }
}

/* Loading Spinner for Send Button */
.loading-spinner {
  width: 16px;
  height: 16px;
  border: 2px solid rgba(255, 255, 255, 0.3);
  border-top: 2px solid white;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
}

/* üöÄ ENHANCED: Êõ¥ÊòéÊòæÁöÑÊñá‰ª∂‰∏ä‰º†ÊåâÈíÆ */
.enhanced-file-btn {
  background: linear-gradient(135deg, #e8f5e8 0%, #f0f8ff 100%) !important;
  border: 2px dashed #28a745 !important;
  border-radius: 12px !important;
  width: 120px !important;
  height: 50px !important;
  color: #28a745 !important;
  font-size: 14px !important;
  font-weight: 600 !important;
  cursor: pointer !important;
  transition: all 0.3s ease !important;
  position: relative !important;
  overflow: hidden !important;
}

.enhanced-file-btn:hover {
  border-color: #20c997 !important;
  color: #20c997 !important;
  background: linear-gradient(135deg, #d4edda 0%, #e8f5e8 100%) !important;
  transform: translateY(-2px) !important;
  box-shadow: 0 4px 12px rgba(40, 167, 69, 0.3) !important;
}

.enhanced-file-btn.active {
  background: linear-gradient(135deg, #20c997 0%, #28a745 100%) !important;
  color: white !important;
  border-color: #20c997 !important;
}

.file-btn-content {
  display: flex !important;
  flex-direction: column !important;
  align-items: center !important;
  justify-content: center !important;
  gap: 4px !important;
  height: 100% !important;
}

.file-btn-text {
  font-size: 16px !important;
  line-height: 1 !important;
}

/* üöÄ NEW: ËæìÂÖ•Ê°ÜÂÜÖÁöÑÊñá‰ª∂‰∏ä‰º†ÊèêÁ§∫ */
.upload-hint {
  position: absolute !important;
  right: 12px !important;
  top: 50% !important;
  transform: translateY(-50%) !important;
  display: flex !important;
  align-items: center !important;
  gap: 6px !important;
  color: var(--color-text-muted) !important;
  font-size: 12px !important;
  cursor: pointer !important;
  background: rgba(255, 255, 255, 0.9) !important;
  padding: 4px 8px !important;
  border-radius: 4px !important;
  border: 1px dashed var(--color-border) !important;
  transition: all 0.3s ease !important;
}

.upload-hint:hover {
  color: var(--color-primary) !important;
  border-color: var(--color-primary) !important;
  background: var(--color-primary-soft) !important;
}

/* üöÄ NEW: Áã¨Á´ãÁöÑÊñá‰ª∂‰∏ä‰º†Âå∫ÂüüÊ†∑ÂºèÂ¢ûÂº∫ */
.file-upload-zone {
  display: flex !important;
  justify-content: center !important;
  padding: 20px !important;
  background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%) !important;
  border: 3px dashed #007bff !important;
  border-radius: 12px !important;
  margin: 15px 0 !important;
  transition: all 0.3s ease !important;
}

.file-upload-zone:hover {
  border-color: #0056b3 !important;
  background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%) !important;
  transform: translateY(-2px) !important;
  box-shadow: 0 4px 16px rgba(0, 123, 255, 0.2) !important;
}

.upload-zone-content {
  display: flex !important;
  flex-direction: column !important;
  align-items: center !important;
  gap: 16px !important;
  cursor: pointer !important;
  padding: 20px !important;
}

.upload-icon {
  width: 48px !important;
  height: 48px !important;
  color: #007bff !important;
  display: flex !important;
  align-items: center !important;
  justify-content: center !important;
}

.upload-text {
  font-size: 16px !important;
  color: #495057 !important;
  text-align: center !important;
}

.upload-title {
  font-weight: 700 !important;
  font-size: 18px !important;
  color: #007bff !important;
  margin-bottom: 4px !important;
}

.upload-subtitle {
  font-size: 14px !important;
  color: #6c757d !important;
  font-weight: 400 !important;
}

/* üöÄ ËæìÂÖ•ÂÆπÂô®Áõ∏ÂØπÂÆö‰Ωç */
.input-container {
  flex: 1 !important;
  display: flex !important;
  align-items: flex-end !important;
  position: relative !important;
}
</style>