import { defineConfig } from "vite";
import vue from "@vitejs/plugin-vue";
import { resolve } from "path";
// import viteShikiPlugin from "./vite-plugin-shiki.js";
import { fileURLToPath, URL } from 'node:url'
import VitePluginVueDevTools from 'vite-plugin-vue-devtools'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [
    vue({
      script: {
        defineModel: true,
        propsDestructure: true
      }
    }),
    // viteShikiPlugin({
    //   theme: 'dark',
    //   lineNumbers: true,
    //   cache: true
    // }),
    // VitePluginVueDevTools() // üîß ‰∏¥Êó∂Á¶ÅÁî®Ëß£ÂÜ≥Ê†ºÂºèÂåñÂô®Âç°Ê≠ªÈóÆÈ¢ò
  ],

  // Path aliases
  resolve: {
    alias: {
      '@': fileURLToPath(new URL('./src', import.meta.url))
    },
  },

  // Vite options tailored for Tauri development and only applied in `tauri dev` or `tauri build`
  //
  // 1. prevent vite from obscuring rust errors
  clearScreen: false,

  // Optimize dependencies - ÁßªÈô§ShikiÁõ∏ÂÖ≥ÈÖçÁΩÆ
  optimizeDeps: {
    include: ['highlight.js'],
    exclude: ['@tauri-apps/api']
  },

  // WorkerÊîØÊåÅ
  worker: {
    format: 'es'
  },

  // 2. tauri expects a fixed port, fail if that port is not available
  server: {
    port: 5173,  // Fixed port for development
    strictPort: false,  // Allow dynamic port for flexibility
    host: true,  // Show network URLs
    open: false, // üöÄ Don't auto-open browser
    cors: true,
    headers: {
      'Cross-Origin-Embedder-Policy': 'require-corp',
      'Cross-Origin-Opener-Policy': 'same-origin',
    },
    fs: {
      allow: ['..']
    },

    // üîß CORS FIX: Add proxy to avoid CORS issues
    proxy: {
      '/api': {
        target: 'https://fdd1-45-77-178-85.ngrok-free.app',
        changeOrigin: true,
        secure: true,
        configure: (proxy, options) => {
          proxy.on('proxyReq', (proxyReq, req, res) => {
            proxyReq.setHeader('ngrok-skip-browser-warning', 'true');
            console.log(`üîó Proxying ${req.method} ${req.url} to ${options.target}${req.url}`);
          });
          proxy.on('error', (err, req, res) => {
            console.error('‚ùå Proxy error:', err);
          });
        }
      },
      '/health': {
        target: 'https://fdd1-45-77-178-85.ngrok-free.app',
        changeOrigin: true,
        secure: true,
        configure: (proxy, options) => {
          proxy.on('proxyReq', (proxyReq, req, res) => {
            proxyReq.setHeader('ngrok-skip-browser-warning', 'true');
            console.log(`üîó Proxying ${req.method} ${req.url} to ${options.target}${req.url}`);
          });
        }
      },
      '/events': {
        target: 'https://fdd1-45-77-178-85.ngrok-free.app',
        changeOrigin: true,
        secure: true,
        ws: true, // Enable WebSocket proxying for SSE
        configure: (proxy, options) => {
          proxy.on('proxyReq', (proxyReq, req, res) => {
            proxyReq.setHeader('ngrok-skip-browser-warning', 'true');
            console.log(`üîó Proxying SSE ${req.method} ${req.url} to ${options.target}${req.url}`);
          });
        }
      },
      '/files': {
        target: 'https://fdd1-45-77-178-85.ngrok-free.app',
        changeOrigin: true,
        secure: true,
        configure: (proxy, options) => {
          proxy.on('proxyReq', (proxyReq, req, res) => {
            proxyReq.setHeader('ngrok-skip-browser-warning', 'true');
            console.log(`üîó Proxying file ${req.method} ${req.url} to ${options.target}${req.url}`);
          });
        }
      },
      '/notify': {
        target: 'https://fdd1-45-77-178-85.ngrok-free.app',
        changeOrigin: true,
        secure: true,
        configure: (proxy, options) => {
          proxy.on('proxyReq', (proxyReq, req, res) => {
            proxyReq.setHeader('ngrok-skip-browser-warning', 'true');
            console.log(`üîó Proxying notify ${req.method} ${req.url} to ${options.target}${req.url}`);
          });
        }
      }
    },

    hmr: {
      protocol: "ws",
      port: 1421,
    },
    watch: {
      // 3. tell vite to ignore watching `src-tauri`
      ignored: ["**/src-tauri/**"],
    },
  },

  define: {
    // Simplified - always development mode
    'import.meta.env.DEV': JSON.stringify(true),
    __VERCEL_ENV__: JSON.stringify('development'),
    __BUILD_TIME__: JSON.stringify(new Date().toISOString())
  },

  // Include WASM files as assets
  // assetsInclude: ['**/*.wasm'],

  build: {
    rollupOptions: {
      output: {
        manualChunks: {
          // ‰ºòÂåñ‰æùËµñÂàÜÂùó - ÁßªÈô§ShikiÔºåÊ∑ªÂä†highlight.js
          'highlight-chunk': ['highlight.js'],
          'vue-chunk': ['vue', 'vue-router', 'pinia'],
          'ui-chunk': ['@headlessui/vue', '@heroicons/vue']
        }
      }
    },
    chunkSizeWarningLimit: 1000,
    target: 'esnext',
    outDir: 'dist',
    sourcemap: true  // Always enable sourcemap for development
  },

  // Show all logs including server URL
  logLevel: 'info',
  esbuild: {
    logOverride: {
      'this-is-undefined-in-esm': 'silent',
      'import-is-undefined': 'silent'
    }
  },

  // Simplified environment variables - no VERCEL_ prefix needed
  envPrefix: ['VITE_']
}); 